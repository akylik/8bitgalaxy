{"ast":null,"code":"import Prop from \"./Prop.js\";\nimport aCard from \"./aCard.js\";\nimport State from \"./State.js\";\nimport Assert from \"./Assert.js\";\nimport { makeAutoObservable } from \"mobx\";\n\nclass Card {\n  constructor(state, acard) {\n    this._state = State.assert(state);\n    this._acard = aCard.assert(acard);\n    this._parent = null;\n    makeAutoObservable(this);\n  }\n\n  get State() {\n    return this._state;\n  }\n\n  get visibility() {\n    return this._state.visibility;\n  }\n\n  get isAbsent() {\n    return this._state.isAbsent;\n  }\n\n  get isTurned() {\n    return this._state.isTurned;\n  }\n\n  get isVisible() {\n    return this._state.isVisible;\n  }\n\n  get isAlternative() {\n    return this._state.isAlternative;\n  }\n\n  get aCard() {\n    return this._acard;\n  }\n\n  get Specs() {\n    return this._acard.Specs;\n  }\n\n  get Alternative() {\n    return this._acard.Alternative;\n  }\n\n  get Name() {\n    return this.aCard.Name;\n  }\n\n  get Type() {\n    return this.aCard.Type;\n  }\n\n  get Race() {\n    return this.aCard.Race;\n  }\n\n  get Level() {\n    return this.statedValue(Prop.Level);\n  }\n\n  get Klass() {\n    return this.statedValue(Prop.Klass);\n  }\n\n  get Defense() {\n    return this.statedValue(Prop.Defense);\n  }\n\n  get Attack() {\n    return this.statedValue(Prop.Attack);\n  }\n\n  get Colonization() {\n    return this.statedValue(Prop.Colonization);\n  }\n\n  get Science() {\n    return this.statedValue(Prop.Science);\n  }\n\n  get Production() {\n    return this.statedValue(Prop.Production);\n  }\n\n  get Requires() {\n    return this.statedValue(Prop.Requires);\n  }\n\n  get Cooperation() {\n    return this.statedValue(Prop.Cooperation);\n  }\n\n  get Utilization() {\n    return this.statedValue(Prop.Utilization);\n  }\n\n  get isHero() {\n    return this.aCard.isHero;\n  }\n\n  get isColony() {\n    return this.aCard.isColony;\n  }\n\n  get isShip() {\n    return this.aCard.isShip;\n  }\n\n  get isBase() {\n    return this.aCard.isBase;\n  } ///////\n\n\n  get parent() {\n    return this._parent;\n  }\n\n  get hasParent() {\n    return this._parent !== null;\n  } ///////\n\n\n  statedValue(prop) {\n    if (this.isTurned) {\n      return null;\n    }\n\n    if (this.isAlternative) {\n      Assert.error(\"TODO implement!\");\n    }\n\n    return this.aCard.getValue(prop);\n  }\n\n  turnOver() {\n    this.State.turnOver();\n  }\n\n  setParent(parentProp) {\n    this._parent = parentProp;\n  }\n\n  static assert(sample, parentProp) {\n    if (sample instanceof Card) {\n      //   Card.parent = parentProp;\n      this.setParent;\n      return sample;\n    }\n\n    if (typeof sample === \"string\") {\n      const card = Card.fromString(sample); //   Card.parent = parentProp;\n\n      this.setParent;\n      return card;\n    }\n\n    Assert.error(\"not a Card\", sample);\n  }\n\n  static fromString(name) {\n    let [state, acard] = name.split(\" \", 2);\n\n    if (!State.isName(state)) {\n      acard = state;\n      state = \"\";\n    }\n\n    return new Card(state, acard);\n  }\n\n}\n\nCard.AbsentBase = Card.assert(\"absent Base\");\nCard.AbsentHero = Card.assert(\"absent Hero\");\nCard.AbsentShip = Card.assert(\"absent Ship\");\nCard.AbsentColony = Card.assert(\"absent Colony\");\nexport default Card;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Card.js"],"names":["Prop","aCard","State","Assert","makeAutoObservable","Card","constructor","state","acard","_state","assert","_acard","_parent","visibility","isAbsent","isTurned","isVisible","isAlternative","Specs","Alternative","Name","Type","Race","Level","statedValue","Klass","Defense","Attack","Colonization","Science","Production","Requires","Cooperation","Utilization","isHero","isColony","isShip","isBase","parent","hasParent","prop","error","getValue","turnOver","setParent","parentProp","sample","card","fromString","name","split","isName","AbsentBase","AbsentHero","AbsentShip","AbsentColony"],"mappings":"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","sourcesContent":["import Prop from \"./Prop.js\";\r\nimport aCard from \"./aCard.js\";\r\nimport State from \"./State.js\";\r\nimport Assert from \"./Assert.js\";\r\nimport {makeAutoObservable} from \"mobx\";\r\n\r\nclass Card {\r\n  constructor(state, acard) {\r\n    this._state = State.assert(state);\r\n    this._acard = aCard.assert(acard);\r\n    this._parent = null;\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get State() {\r\n    return this._state;\r\n  }\r\n  get visibility() {\r\n    return this._state.visibility;\r\n  }\r\n  get isAbsent() {\r\n    return this._state.isAbsent;\r\n  }\r\n  get isTurned() {\r\n    return this._state.isTurned;\r\n  }\r\n  get isVisible() {\r\n    return this._state.isVisible;\r\n  }\r\n  get isAlternative() {\r\n    return this._state.isAlternative;\r\n  }\r\n\r\n  get aCard() {\r\n    return this._acard;\r\n  }\r\n  get Specs() {\r\n    return this._acard.Specs;\r\n  }\r\n  get Alternative() {\r\n    return this._acard.Alternative;\r\n  }\r\n\r\n  get Name() {\r\n    return this.aCard.Name;\r\n  }\r\n  get Type() {\r\n    return this.aCard.Type;\r\n  }\r\n  get Race() {\r\n    return this.aCard.Race;\r\n  }\r\n  get Level() {\r\n    return this.statedValue(Prop.Level);\r\n  }\r\n  get Klass() {\r\n    return this.statedValue(Prop.Klass);\r\n  }\r\n  get Defense() {\r\n    return this.statedValue(Prop.Defense);\r\n  }\r\n  get Attack() {\r\n    return this.statedValue(Prop.Attack);\r\n  }\r\n  get Colonization() {\r\n    return this.statedValue(Prop.Colonization);\r\n  }\r\n  get Science() {\r\n    return this.statedValue(Prop.Science);\r\n  }\r\n  get Production() {\r\n    return this.statedValue(Prop.Production);\r\n  }\r\n  get Requires() {\r\n    return this.statedValue(Prop.Requires);\r\n  }\r\n  get Cooperation() {\r\n    return this.statedValue(Prop.Cooperation);\r\n  }\r\n  get Utilization() {\r\n    return this.statedValue(Prop.Utilization);\r\n  }\r\n\r\n  get isHero() {\r\n    return this.aCard.isHero;\r\n  }\r\n  get isColony() {\r\n    return this.aCard.isColony;\r\n  }\r\n  get isShip() {\r\n    return this.aCard.isShip;\r\n  }\r\n  get isBase() {\r\n    return this.aCard.isBase;\r\n  }\r\n  ///////\r\n  get parent() {\r\n    return this._parent;\r\n  }\r\n  get hasParent() {\r\n    return this._parent !== null;\r\n  }\r\n  ///////\r\n  static AbsentBase = Card.assert(\"absent Base\");\r\n  static AbsentHero = Card.assert(\"absent Hero\");\r\n  static AbsentShip = Card.assert(\"absent Ship\");\r\n  static AbsentColony = Card.assert(\"absent Colony\");\r\n\r\n  statedValue(prop) {\r\n    if (this.isTurned) {\r\n      return null;\r\n    }\r\n    if (this.isAlternative) {\r\n      Assert.error(\"TODO implement!\");\r\n    }\r\n    return this.aCard.getValue(prop);\r\n  }\r\n\r\n  turnOver() {\r\n    this.State.turnOver();\r\n  }\r\n\r\n  setParent(parentProp) {\r\n    this._parent = parentProp;\r\n  }\r\n\r\n  static assert(sample, parentProp) {\r\n    if (sample instanceof Card) {\r\n      //   Card.parent = parentProp;\r\n        this.setParent;\r\n        \r\n      return sample;\r\n    }\r\n    if (typeof sample === \"string\") {\r\n      const card = Card.fromString(sample);\r\n      //   Card.parent = parentProp;\r\n         this.setParent;\r\n\r\n      return card;\r\n    }\r\n    Assert.error(\"not a Card\", sample);\r\n  }\r\n\r\n  static fromString(name) {\r\n    let [state, acard] = name.split(\" \", 2);\r\n    if (!State.isName(state)) {\r\n      acard = state;\r\n      state = \"\";\r\n    }\r\n    return new Card(state, acard);\r\n  }\r\n}\r\n\r\nexport default Card;\r\n"]},"metadata":{},"sourceType":"module"}