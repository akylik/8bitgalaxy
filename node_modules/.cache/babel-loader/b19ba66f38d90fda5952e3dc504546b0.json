{"ast":null,"code":"import Type from \"./Type.js\";\n\nclass Generator {\n  constructor() {\n    this._gens = {};\n    this.add('Human');\n    this.add('AI');\n  }\n\n  add(race) {\n    this._gens[race] = new GenDeck(race);\n  }\n\n  all() {\n    let res = {};\n\n    for (const race in this._gens) {\n      Object.assign(res, this._gens[race].all());\n    }\n\n    return res;\n  }\n\n  stats() {\n    let all = this.all();\n  }\n\n}\n\nclass GenDeck {\n  constructor(race) {\n    this._race = race;\n    this._p1 = 'a';\n    this._p2 = 's';\n    this._p3 = 'p';\n    this._p4 = 'c';\n  }\n\n  all() {\n    let res = {};\n    Object.assign(res, this.heroes());\n    return res;\n  }\n\n  heroes() {\n    let res = {};\n\n    for (const klass of [this._p1, this._p2]) {\n      res[this.hero(1, klass)] = 'a2' + klass;\n      res[this.hero(3, klass)] = 'a4' + klass;\n      res[this.hero(5, klass)] = 'a6' + klass;\n      res[this.hero(7, klass)] = 'a8' + klass;\n    }\n\n    for (const klass of [this._p3, this._p4]) {\n      res[this.hero(1, klass)] = 'a2' + klass;\n      res[this.hero(3, klass)] = 'a4' + klass;\n    }\n\n    return res;\n  }\n\n  hero(level, klass) {\n    return this.card(Type.Hero, level, klass);\n  }\n\n  card(type, level, klass) {\n    return this._race + '-' + type + '-' + level + klass;\n  }\n\n}\n\nexport default Generator;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Generator.js"],"names":["Type","Generator","constructor","_gens","add","race","GenDeck","all","res","Object","assign","stats","_race","_p1","_p2","_p3","_p4","heroes","klass","hero","level","card","Hero","type"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;;AAGA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,GAAE;AACX,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,GAAL,CAAS,OAAT;AACA,SAAKA,GAAL,CAAS,IAAT;AACD;;AAEDA,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR,SAAKF,KAAL,CAAWE,IAAX,IAAmB,IAAIC,OAAJ,CAAYD,IAAZ,CAAnB;AACD;;AAEDE,EAAAA,GAAG,GAAG;AACJ,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAK,MAAMH,IAAX,IAAmB,KAAKF,KAAxB,EAA+B;AAC7BM,MAAAA,MAAM,CAACC,MAAP,CAAcF,GAAd,EAAmB,KAAKL,KAAL,CAAWE,IAAX,EAAiBE,GAAjB,EAAnB;AACD;;AACD,WAAOC,GAAP;AACD;;AAEDG,EAAAA,KAAK,GAAG;AACN,QAAIJ,GAAG,GAAG,KAAKA,GAAL,EAAV;AACD;;AArBa;;AAwBhB,MAAMD,OAAN,CAAc;AACZJ,EAAAA,WAAW,CAACG,IAAD,EAAO;AAChB,SAAKO,KAAL,GAAaP,IAAb;AACA,SAAKQ,GAAL,GAAW,GAAX;AACA,SAAKC,GAAL,GAAW,GAAX;AACA,SAAKC,GAAL,GAAW,GAAX;AACA,SAAKC,GAAL,GAAW,GAAX;AACD;;AAEDT,EAAAA,GAAG,GAAG;AACJ,QAAIC,GAAG,GAAG,EAAV;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAcF,GAAd,EAAmB,KAAKS,MAAL,EAAnB;AACA,WAAOT,GAAP;AACD;;AAEDS,EAAAA,MAAM,GAAG;AACP,QAAIT,GAAG,GAAG,EAAV;;AAEA,SAAK,MAAMU,KAAX,IAAoB,CAAC,KAAKL,GAAN,EAAW,KAAKC,GAAhB,CAApB,EAA0C;AACxCN,MAAAA,GAAG,CAAC,KAAKW,IAAL,CAAU,CAAV,EAAaD,KAAb,CAAD,CAAH,GAA2B,OAAOA,KAAlC;AACAV,MAAAA,GAAG,CAAC,KAAKW,IAAL,CAAU,CAAV,EAAaD,KAAb,CAAD,CAAH,GAA2B,OAAOA,KAAlC;AACAV,MAAAA,GAAG,CAAC,KAAKW,IAAL,CAAU,CAAV,EAAaD,KAAb,CAAD,CAAH,GAA2B,OAAOA,KAAlC;AACAV,MAAAA,GAAG,CAAC,KAAKW,IAAL,CAAU,CAAV,EAAaD,KAAb,CAAD,CAAH,GAA2B,OAAOA,KAAlC;AACD;;AACD,SAAK,MAAMA,KAAX,IAAoB,CAAC,KAAKH,GAAN,EAAW,KAAKC,GAAhB,CAApB,EAA0C;AACxCR,MAAAA,GAAG,CAAC,KAAKW,IAAL,CAAU,CAAV,EAAaD,KAAb,CAAD,CAAH,GAA2B,OAAOA,KAAlC;AACAV,MAAAA,GAAG,CAAC,KAAKW,IAAL,CAAU,CAAV,EAAaD,KAAb,CAAD,CAAH,GAA2B,OAAOA,KAAlC;AACD;;AAED,WAAOV,GAAP;AACD;;AAEDW,EAAAA,IAAI,CAACC,KAAD,EAAQF,KAAR,EAAe;AACjB,WAAO,KAAKG,IAAL,CAAUrB,IAAI,CAACsB,IAAf,EAAqBF,KAArB,EAA4BF,KAA5B,CAAP;AACD;;AAEDG,EAAAA,IAAI,CAACE,IAAD,EAAOH,KAAP,EAAcF,KAAd,EAAqB;AACvB,WAAO,KAAKN,KAAL,GAAa,GAAb,GAAmBW,IAAnB,GAA0B,GAA1B,GAAgCH,KAAhC,GAAwCF,KAA/C;AACD;;AAtCW;;AAyCd,eAAejB,SAAf","sourcesContent":["import Type from \"./Type.js\";\r\n\r\n\r\nclass Generator {\r\n  constructor(){\r\n    this._gens = {}\r\n    this.add('Human');\r\n    this.add('AI');\r\n  }\r\n\r\n  add(race) {\r\n    this._gens[race] = new GenDeck(race);\r\n  }\r\n\r\n  all() {\r\n    let res = {}\r\n    for (const race in this._gens) {\r\n      Object.assign(res, this._gens[race].all());\r\n    }\r\n    return res;\r\n  }\r\n\r\n  stats() {\r\n    let all = this.all();\r\n  }\r\n}\r\n\r\nclass GenDeck {\r\n  constructor(race) {\r\n    this._race = race;\r\n    this._p1 = 'a';\r\n    this._p2 = 's';\r\n    this._p3 = 'p';\r\n    this._p4 = 'c';\r\n  }\r\n\r\n  all() {\r\n    let res = {};\r\n    Object.assign(res, this.heroes());\r\n    return res;\r\n  }\r\n\r\n  heroes() {\r\n    let res = {};\r\n\r\n    for (const klass of [this._p1, this._p2]) {\r\n      res[this.hero(1, klass)] = 'a2' + klass;\r\n      res[this.hero(3, klass)] = 'a4' + klass;\r\n      res[this.hero(5, klass)] = 'a6' + klass;\r\n      res[this.hero(7, klass)] = 'a8' + klass;\r\n    }\r\n    for (const klass of [this._p3, this._p4]) {\r\n      res[this.hero(1, klass)] = 'a2' + klass;\r\n      res[this.hero(3, klass)] = 'a4' + klass;\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  hero(level, klass) {\r\n    return this.card(Type.Hero, level, klass);\r\n  }\r\n\r\n  card(type, level, klass) {\r\n    return this._race + '-' + type + '-' + level + klass;\r\n  }\r\n}\r\n\r\nexport default Generator;\r\n"]},"metadata":{},"sourceType":"module"}