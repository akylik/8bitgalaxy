{"ast":null,"code":"import Card from \"./Card.js\";\nimport Assert from \"./Assert.js\";\n\nclass Star {\n  constructor(field, y, x) {\n    this.field = field;\n    this.y = y;\n    this.x = x;\n    this.ships = [null, null, null, null];\n    this.bases = [null, null, null];\n    this.heroes = [null, null, null, null];\n    this.colonies = [null, null, null];\n    this._parent = null; //  console.log(this);\n  }\n\n  base(slot) {\n    var _this$bases$slot;\n\n    return (_this$bases$slot = this.bases[slot]) !== null && _this$bases$slot !== void 0 ? _this$bases$slot : Card.AbsentBase;\n  }\n\n  hero(slot) {\n    var _this$heroes$slot;\n\n    return (_this$heroes$slot = this.heroes[slot]) !== null && _this$heroes$slot !== void 0 ? _this$heroes$slot : Card.AbsentHero;\n  }\n\n  ship(slot) {\n    var _this$ships$slot;\n\n    return (_this$ships$slot = this.ships[slot]) !== null && _this$ships$slot !== void 0 ? _this$ships$slot : Card.AbsentShip;\n  }\n\n  colony(slot) {\n    var _this$colonies$slot;\n\n    return (_this$colonies$slot = this.colonies[slot]) !== null && _this$colonies$slot !== void 0 ? _this$colonies$slot : Card.AbsentColony;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get hasParent() {\n    return this._parent !== null;\n  }\n\n  setParent(parent) {\n    // if (typeof destination !== typeof undefined) {\n    this._parent = parent; // }\n  }\n\n  put(card, slot) {\n    //   console.log(card, slot);\n    card = Card.assert(card);\n\n    if (card.isBase) {\n      return this.putToSlot(card, slot, this.bases, this);\n    } else if (card.isShip) {\n      return this.putToSlot(card, slot, this.ships, this);\n    } else if (card.isHero) {\n      return this.putToSlot(card, slot, this.heroes, this);\n    } else if (card.isColony) {\n      return this.putToSlot(card, slot, this.colonies, this);\n    }\n\n    Assert.error('wrong card type', card);\n  }\n\n  putToSlot(card, slot, slots, parent) {\n    //   console.log(card);\n    //   console.log(slot);\n    //   console.log(slots);\n    //   console.log(parent);\n    if (slots[slot] === undefined) {\n      Assert.error(\"non-existent slot\", slot);\n    }\n\n    if (slots[slot] !== null) {\n      Assert.error(\"slot already taken\", slot);\n    }\n\n    this._parent = parent;\n    console.log(this._parent);\n    slots[slot] = card; //   card.setParent(parent);\n\n    return this;\n  }\n\n}\n\nexport default Star;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Star.js"],"names":["Card","Assert","Star","constructor","field","y","x","ships","bases","heroes","colonies","_parent","base","slot","AbsentBase","hero","AbsentHero","ship","AbsentShip","colony","AbsentColony","parent","hasParent","setParent","put","card","assert","isBase","putToSlot","isShip","isHero","isColony","error","slots","undefined","console","log"],"mappings":"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","sourcesContent":["import Card from \"./Card.js\";\r\nimport Assert from \"./Assert.js\";\r\n\r\nclass Star {\r\n  constructor(field, y, x) {\r\n    this.field = field;\r\n    this.y = y;\r\n    this.x = x;\r\n    this.ships = [null, null, null, null];\r\n    this.bases = [null, null, null];\r\n    this.heroes = [null, null, null, null];\r\n    this.colonies = [null, null, null];\r\n    this._parent = null;\r\n   //  console.log(this);\r\n  }\r\n\r\n  base(slot)      { return this.bases[slot]     ?? Card.AbsentBase; }\r\n  hero(slot)      { return this.heroes[slot]    ?? Card.AbsentHero; }\r\n  ship(slot)      { return this.ships[slot]     ?? Card.AbsentShip; }\r\n  colony(slot)    { return this.colonies[slot]  ?? Card.AbsentColony; }\r\n\r\n  get parent()    { return this._parent; }\r\n  get hasParent() { return this._parent !== null; }\r\n   \r\n  setParent(parent) {\r\n      // if (typeof destination !== typeof undefined) {\r\n        this._parent = parent;\r\n      // }\r\n   }\r\n   \r\n   put(card, slot) {\r\n   //   console.log(card, slot);\r\n    card = Card.assert(card);\r\n    if (card.isBase) {\r\n      return this.putToSlot(card, slot, this.bases, this);\r\n    } else if (card.isShip) {\r\n      return this.putToSlot(card, slot, this.ships, this);\r\n    } else if (card.isHero) {\r\n      return this.putToSlot(card, slot, this.heroes, this);\r\n    } else if (card.isColony) {\r\n      return this.putToSlot(card, slot, this.colonies, this);\r\n    }\r\n    Assert.error('wrong card type', card);\r\n  }\r\n\r\n   putToSlot(card, slot, slots, parent) {\r\n     //   console.log(card);\r\n     //   console.log(slot);\r\n     //   console.log(slots);\r\n     //   console.log(parent);\r\n     if (slots[slot] === undefined) {\r\n       Assert.error(\"non-existent slot\", slot);\r\n     }\r\n     if (slots[slot] !== null) {\r\n       Assert.error(\"slot already taken\", slot);\r\n      }\r\n      this._parent = parent;\r\n      console.log(this._parent, );\r\n\r\n     slots[slot] = card;\r\n   //   card.setParent(parent);\r\n\r\n     return this;\r\n   }\r\n}\r\n\r\nexport default Star;\r\n"]},"metadata":{},"sourceType":"module"}