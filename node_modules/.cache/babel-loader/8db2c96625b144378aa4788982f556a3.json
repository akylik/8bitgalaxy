{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a_kyl\\\\Documents\\\\GitHub\\\\8bitgalaxy\\\\src\\\\components\\\\ui\\\\PileView.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport cn from \"classnames\";\nimport { useDrop } from \"react-dnd\";\nimport { observer } from \"mobx-react-lite\";\nimport CardView from \"./CardView\";\nimport usePosition from \"../../state/hooks/usePosition\";\nimport useHover from \"../../state/hooks/useHover\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PileView({\n  pile,\n  y,\n  x\n}) {\n  _s();\n\n  if (pile._cards.length > 0) {\n    console.log(pile.cards);\n  }\n\n  const [p] = usePosition(y, x);\n  const [hoverRef, isHover] = useHover();\n  const [{\n    isOver\n  }, dropRef] = useDrop(() => ({\n    accept: \"CARD\",\n    drop: (item, monitor) => {\n      // const parent = getParent(item.card, 2);\n      // parent.remove(item.card);\n      // console.log(item.card.destination)\n      item.card.destination.removeCard(item.card);\n      pile.put(item.card);\n      const destanation = item.card.destination;\n      return {\n        place: pile\n      };\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  }), [x, y]);\n  const turnedCards = pile.cards.filter(card => !card.isTurned);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: dropRef,\n    className: cn(\"Pile\", pile.direction.name),\n    style: {\n      left: p.x + \"px\",\n      top: p.y + \"px\",\n      backgroundColor: isOver ? \"red\" : \"inherit\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: hoverRef,\n      children: [pile.cards.map((card, idx) => {\n        let indentY = 0.2;\n        let indentX = 0.2;\n\n        if (!card.isTurned && isHover && turnedCards.length > 1 && idx === 0) {\n          // indentY = pile.direction.name === \"LeftToRight\" ? 0.8 : 0.2;\n          indentX = pile.direction.name === \"TopToBottom\" ? 0.2 : 0.2;\n        } else if (!card.isTurned && isHover && turnedCards.length > 1 && idx > 0) {\n          indentY = pile.direction.name === \"LeftToRight\" ? 0.8 : 0.2;\n          indentX = pile.direction.name === \"TopToBottom\" ? 0.8 : 0.2;\n        }\n\n        return (\n          /*#__PURE__*/\n          // <SlotPile >\n          _jsxDEV(CardView, {\n            card: card,\n            y: idx * indentY,\n            x: idx * indentX\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this) // </SlotPile>\n\n        );\n      }), isOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: pile.top ? pile.top.Type : \"Ship\",\n        style: {\n          position: \"absolute\",\n          zIndex: 1,\n          opacity: 0.5,\n          backgroundColor: \"red\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PileView, \"c1D9X0+PyY3Bw71uymkavHz9/ag=\", false, function () {\n  return [usePosition, useHover, useDrop];\n});\n\n_c = PileView;\nconst SlotPileView = styled.div`\n  position: absolute;\n  border-width: 4px;\n  border-style: solid;\n  top: 0;\n  left: 0;\n//   top: ${({\n  y\n}) => y + \"px\"};\n//   left: ${({\n  x\n}) => x + \"px\"};\n  z-index: 2;\n  border-radius: 20px;\n  width: 300px;\n  height: 400px;\n`;\n_c2 = SlotPileView;\nconst SlotPile = observer(_c3 = _s2(({\n  y,\n  x,\n  children\n}) => {\n  _s2();\n\n  // const Slot = observer(({name, star, y, x, card, slot, isActive }) => {\n  const [p] = usePosition(y, x); //   const [{isOver, canDrop}, dropRef] = useDrop(() => ({\n  //     accept: \"CARD\",\n  //     drop: (item, monitor) => {\n  //       let a = monitor.getItem();\n  //       if(item.card.Type === card.Name){\n  //         item.card.destination.removeCard(item.card);\n  //         star.put(item.card, slot);\n  //       }\n  //       return {\n  //          place: star,\n  //          name: name,\n  //       };\n  //    },\n  //     collect: monitor => ({\n  //       isOver: !!monitor.isOver(),\n  //     }),\n  //   }), [x, y]);\n\n  return /*#__PURE__*/_jsxDEV(SlotPileView // y={p.y - 0} \n  // x={0 + p.x} \n  , {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}, \"JqhsnV51FLbBMrYe3I3IaHXnvkY=\", false, function () {\n  return [usePosition];\n}));\n_c4 = SlotPile;\nexport default _c5 = observer(PileView);\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"PileView\");\n$RefreshReg$(_c2, \"SlotPileView\");\n$RefreshReg$(_c3, \"SlotPile$observer\");\n$RefreshReg$(_c4, \"SlotPile\");\n$RefreshReg$(_c5, \"%default%\");","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/components/ui/PileView.js"],"names":["React","cn","useDrop","observer","CardView","usePosition","useHover","styled","PileView","pile","y","x","_cards","length","console","log","cards","p","hoverRef","isHover","isOver","dropRef","accept","drop","item","monitor","card","destination","removeCard","put","destanation","place","collect","turnedCards","filter","isTurned","direction","name","left","top","backgroundColor","map","idx","indentY","indentX","Type","position","zIndex","opacity","SlotPileView","div","SlotPile","children"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAGA,SAASC,QAAT,CAAkB;AAACC,EAAAA,IAAD;AAAOC,EAAAA,CAAP;AAAUC,EAAAA;AAAV,CAAlB,EAAgC;AAAA;;AAC7B,MAAGF,IAAI,CAACG,MAAL,CAAYC,MAAZ,GAAqB,CAAxB,EAA2B;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,KAAjB;AACF;;AACF,QAAM,CAACC,CAAD,IAAMZ,WAAW,CAACK,CAAD,EAAIC,CAAJ,CAAvB;AACA,QAAM,CAACO,QAAD,EAAWC,OAAX,IAAsBb,QAAQ,EAApC;AACA,QAAM,CAAC;AAACc,IAAAA;AAAD,GAAD,EAAWC,OAAX,IAAsBnB,OAAO,CAAC,OAAO;AACzCoB,IAAAA,MAAM,EAAE,MADiC;AAEzCC,IAAAA,IAAI,EAAE,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACvB;AACA;AACA;AACAD,MAAAA,IAAI,CAACE,IAAL,CAAUC,WAAV,CAAsBC,UAAtB,CAAiCJ,IAAI,CAACE,IAAtC;AACAjB,MAAAA,IAAI,CAACoB,GAAL,CAASL,IAAI,CAACE,IAAd;AACA,YAAMI,WAAW,GAAGN,IAAI,CAACE,IAAL,CAAUC,WAA9B;AACA,aAAO;AACLI,QAAAA,KAAK,EAAEtB;AADF,OAAP;AAGD,KAZwC;AAazCuB,IAAAA,OAAO,EAAEP,OAAO,KAAK;AACnBL,MAAAA,MAAM,EAAE,CAAC,CAACK,OAAO,CAACL,MAAR;AADS,KAAL;AAbyB,GAAP,CAAD,EAgB/B,CAACT,CAAD,EAAID,CAAJ,CAhB+B,CAAnC;AAiBA,QAAMuB,WAAW,GAAGxB,IAAI,CAACO,KAAL,CAAWkB,MAAX,CAAkBR,IAAI,IAAI,CAACA,IAAI,CAACS,QAAhC,CAApB;AAEA,sBACE;AACE,IAAA,GAAG,EAAEd,OADP;AAEE,IAAA,SAAS,EAAEpB,EAAE,CAAC,MAAD,EAASQ,IAAI,CAAC2B,SAAL,CAAeC,IAAxB,CAFf;AAGE,IAAA,KAAK,EAAE;AAACC,MAAAA,IAAI,EAAErB,CAAC,CAACN,CAAF,GAAM,IAAb;AAAmB4B,MAAAA,GAAG,EAAEtB,CAAC,CAACP,CAAF,GAAM,IAA9B;AAAoC8B,MAAAA,eAAe,EAAEpB,MAAM,GAAG,KAAH,GAAW;AAAtE,KAHT;AAAA,2BAKE;AAAK,MAAA,GAAG,EAAEF,QAAV;AAAA,iBACGT,IAAI,CAACO,KAAL,CAAWyB,GAAX,CAAe,CAACf,IAAD,EAAOgB,GAAP,KAAe;AAC7B,YAAIC,OAAO,GAAG,GAAd;AACA,YAAIC,OAAO,GAAG,GAAd;;AACA,YAAI,CAAClB,IAAI,CAACS,QAAN,IAAkBhB,OAAlB,IAA6Bc,WAAW,CAACpB,MAAZ,GAAqB,CAAlD,IAAuD6B,GAAG,KAAG,CAAjE,EAAoE;AAClE;AACAE,UAAAA,OAAO,GAAGnC,IAAI,CAAC2B,SAAL,CAAeC,IAAf,KAAwB,aAAxB,GAAwC,GAAxC,GAA8C,GAAxD;AACD,SAHD,MAIK,IAAI,CAACX,IAAI,CAACS,QAAN,IAAkBhB,OAAlB,IAA6Bc,WAAW,CAACpB,MAAZ,GAAqB,CAAlD,IAAuD6B,GAAG,GAAC,CAA/D,EAAkE;AACrEC,UAAAA,OAAO,GAAGlC,IAAI,CAAC2B,SAAL,CAAeC,IAAf,KAAwB,aAAxB,GAAwC,GAAxC,GAA8C,GAAxD;AACAO,UAAAA,OAAO,GAAGnC,IAAI,CAAC2B,SAAL,CAAeC,IAAf,KAAwB,aAAxB,GAAwC,GAAxC,GAA8C,GAAxD;AACD;;AACD;AAAA;AACG;AACG,kBAAC,QAAD;AAAoB,YAAA,IAAI,EAAEX,IAA1B;AAAgC,YAAA,CAAC,EAAEgB,GAAG,GAAGC,OAAzC;AAAkD,YAAA,CAAC,EAAED,GAAG,GAAGE;AAA3D,aAAeF,GAAf;AAAA;AAAA;AAAA;AAAA,kBAFN,CAGG;;AAHH;AAKD,OAhBA,CADH,EAkBGtB,MAAM,iBACL;AACE,QAAA,SAAS,EAAEX,IAAI,CAAC8B,GAAL,GAAW9B,IAAI,CAAC8B,GAAL,CAASM,IAApB,GAA2B,MADxC;AAEE,QAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,UADL;AAELC,UAAAA,MAAM,EAAE,CAFH;AAGLC,UAAAA,OAAO,EAAE,GAHJ;AAILR,UAAAA,eAAe,EAAE;AAJZ;AAFT;AAAA;AAAA;AAAA;AAAA,cAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD;;GA/DQhC,Q;UAIKH,W,EACgBC,Q,EACAJ,O;;;KANrBM,Q;AAiET,MAAMyC,YAAY,GAAG1C,MAAM,CAAC2C,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;AAACxC,EAAAA;AAAD,CAAD,KAASA,CAAC,GAAG,IAAK;AAC9B,aAAa,CAAC;AAACC,EAAAA;AAAD,CAAD,KAASA,CAAC,GAAG,IAAK;AAC/B;AACA;AACA;AACA;AACA,CAZA;MAAMsC,Y;AAcN,MAAME,QAAQ,GAAGhD,QAAQ,WAAC,CAAC;AAAEO,EAAAA,CAAF;AAAKC,EAAAA,CAAL;AAAQyC,EAAAA;AAAR,CAAD,KAAwB;AAAA;;AAClD;AACE,QAAM,CAACnC,CAAD,IAAMZ,WAAW,CAACK,CAAD,EAAIC,CAAJ,CAAvB,CAFgD,CAGlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,sBACE,QAAC,YAAD,CACE;AACA;AAFF;AAAA,cAIIyC;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA7BwB;AAAA,UAEX/C,WAFW;AAAA,GAAzB;MAAM8C,Q;AAiCN,qBAAehD,QAAQ,CAACK,QAAD,CAAvB","sourcesContent":["import React from \"react\";\r\nimport cn from \"classnames\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport CardView from \"./CardView\";\r\nimport usePosition from \"../../state/hooks/usePosition\";\r\nimport useHover from \"../../state/hooks/useHover\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\n\r\nfunction PileView({pile, y, x}) {\r\n   if(pile._cards.length > 0) {\r\n      console.log(pile.cards)\r\n   }\r\n  const [p] = usePosition(y, x);\r\n  const [hoverRef, isHover] = useHover();\r\n  const [{isOver}, dropRef] = useDrop(() => ({\r\n    accept: \"CARD\",\r\n    drop: (item, monitor) => {\r\n      // const parent = getParent(item.card, 2);\r\n      // parent.remove(item.card);\r\n      // console.log(item.card.destination)\r\n      item.card.destination.removeCard(item.card);\r\n      pile.put(item.card);\r\n      const destanation = item.card.destination;\r\n      return {\r\n        place: pile,\r\n      };\r\n    },\r\n    collect: monitor => ({\r\n      isOver: !!monitor.isOver(),\r\n    }),\r\n  }), [x, y]);\r\n  const turnedCards = pile.cards.filter(card => !card.isTurned);\r\n\r\n  return (\r\n    <div\r\n      ref={dropRef}\r\n      className={cn(\"Pile\", pile.direction.name)}\r\n      style={{left: p.x + \"px\", top: p.y + \"px\", backgroundColor: isOver ? \"red\" : \"inherit\"}}\r\n    >\r\n      <div ref={hoverRef}>\r\n        {pile.cards.map((card, idx) => {\r\n          let indentY = 0.2;\r\n          let indentX = 0.2;\r\n          if (!card.isTurned && isHover && turnedCards.length > 1 && idx===0) {\r\n            // indentY = pile.direction.name === \"LeftToRight\" ? 0.8 : 0.2;\r\n            indentX = pile.direction.name === \"TopToBottom\" ? 0.2 : 0.2;\r\n          }\r\n          else if (!card.isTurned && isHover && turnedCards.length > 1 && idx>0) {\r\n            indentY = pile.direction.name === \"LeftToRight\" ? 0.8 : 0.2;\r\n            indentX = pile.direction.name === \"TopToBottom\" ? 0.8 : 0.2;\r\n          }\r\n          return (\r\n             // <SlotPile >\r\n                <CardView key={idx} card={card} y={idx * indentY} x={idx * indentX}/>\r\n             // </SlotPile>\r\n          );\r\n        })}\r\n        {isOver && (\r\n          <div\r\n            className={pile.top ? pile.top.Type : \"Ship\"}\r\n            style={{\r\n              position: \"absolute\",\r\n              zIndex: 1,\r\n              opacity: 0.5,\r\n              backgroundColor: \"red\",\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SlotPileView = styled.div`\r\n  position: absolute;\r\n  border-width: 4px;\r\n  border-style: solid;\r\n  top: 0;\r\n  left: 0;\r\n//   top: ${({y}) => y + \"px\"};\r\n//   left: ${({x}) => x + \"px\"};\r\n  z-index: 2;\r\n  border-radius: 20px;\r\n  width: 300px;\r\n  height: 400px;\r\n`;\r\n\r\nconst SlotPile = observer(({ y, x ,children }) => {\r\n// const Slot = observer(({name, star, y, x, card, slot, isActive }) => {\r\n  const [p] = usePosition(y, x);\r\n//   const [{isOver, canDrop}, dropRef] = useDrop(() => ({\r\n//     accept: \"CARD\",\r\n//     drop: (item, monitor) => {\r\n//       let a = monitor.getItem();\r\n//       if(item.card.Type === card.Name){\r\n//         item.card.destination.removeCard(item.card);\r\n//         star.put(item.card, slot);\r\n//       }\r\n//       return {\r\n//          place: star,\r\n//          name: name,\r\n//       };\r\n//    },\r\n//     collect: monitor => ({\r\n//       isOver: !!monitor.isOver(),\r\n//     }),\r\n//   }), [x, y]);\r\n\r\n  return (\r\n    <SlotPileView \r\n      // y={p.y - 0} \r\n      // x={0 + p.x} \r\n    >\r\n       {children}\r\n    </SlotPileView>\r\n  );\r\n});\r\n\r\n\r\n\r\nexport default observer(PileView);\r\n"]},"metadata":{},"sourceType":"module"}