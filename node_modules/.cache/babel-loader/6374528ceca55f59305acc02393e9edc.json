{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a_kyl\\\\Documents\\\\GitHub\\\\8bitgalaxy\\\\src\\\\components\\\\ui\\\\PileView.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport cn from \"classnames\";\nimport { useDrop } from \"react-dnd\";\nimport { observer } from \"mobx-react-lite\";\nimport CardView from \"./CardView\";\nimport usePosition from \"../../state/hooks/usePosition\";\nimport useHover from \"../../state/hooks/useHover\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PileView({\n  pile,\n  y,\n  x\n}) {\n  _s();\n\n  if (pile.length) console.log(pile);\n  const [p] = usePosition(y, x);\n  const [hoverRef, isHover] = useHover();\n  const [{\n    isOver\n  }, dropRef] = useDrop(() => ({\n    accept: \"CARD\",\n    drop: (item, monitor) => {\n      // const parent = getParent(item.card, 2);\n      // parent.remove(item.card);\n      // console.log(item.card.destination)\n      item.card.destination.removeCard(item.card);\n      pile.put(item.card);\n      const destanation = item.card.destination;\n      return {\n        place: pile\n      };\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  }), [x, y]);\n  const turnedCards = pile.cards.filter(card => !card.isTurned);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: dropRef,\n    className: cn(\"Pile\", pile.direction.name),\n    style: {\n      left: p.x + \"px\",\n      top: p.y + \"px\",\n      backgroundColor: isOver ? \"red\" : \"inherit\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: hoverRef,\n      children: [pile.cards.map((card, idx) => {\n        let indentY = 0.2;\n        let indentX = 0.2;\n\n        if (!card.isTurned && isHover && turnedCards.length > 1) {\n          indentY = pile.direction.name === \"LeftToRight\" ? 0.8 : 0.2;\n          indentX = pile.direction.name === \"TopToBottom\" ? 0.8 : 0.2;\n        }\n\n        return /*#__PURE__*/_jsxDEV(CardView, {\n          card: card,\n          y: idx * indentY,\n          x: idx * indentX\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this);\n      }), isOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: pile.top ? pile.top.Type : \"Ship\",\n        style: {\n          position: \"absolute\",\n          zIndex: 1,\n          opacity: 0.5,\n          backgroundColor: \"red\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PileView, \"c1D9X0+PyY3Bw71uymkavHz9/ag=\", false, function () {\n  return [usePosition, useHover, useDrop];\n});\n\n_c = PileView;\nconst SlotPileView = styled.div`\n  position: absolute;\n  border-width: 4px;\n  border-style: solid;\n  top: ${({\n  y\n}) => y + \"px\"};\n  left: ${({\n  x\n}) => x + \"px\"};\n  z-index: 2;\n  border-radius: 20px;\n  width: 300px;\n  height: 200px;\n`;\n_c2 = SlotPileView;\nconst Slot = observer(_c3 = _s2(({\n  y,\n  x\n}) => {\n  _s2();\n\n  // const Slot = observer(({name, star, y, x, card, slot, isActive }) => {\n  const [p] = usePosition(y, x); //   const [{isOver, canDrop}, dropRef] = useDrop(() => ({\n  //     accept: \"CARD\",\n  //     drop: (item, monitor) => {\n  //       let a = monitor.getItem();\n  //       if(item.card.Type === card.Name){\n  //         item.card.destination.removeCard(item.card);\n  //         star.put(item.card, slot);\n  //       }\n  //       return {\n  //          place: star,\n  //          name: name,\n  //       };\n  //    },\n  //     collect: monitor => ({\n  //       isOver: !!monitor.isOver(),\n  //     }),\n  //   }), [x, y]);\n\n  return /*#__PURE__*/_jsxDEV(SlotPileView, {\n    ref: dropRef // className={card.Name} \n    ,\n    y: p.y - 0,\n    x: 18 + p.x // isOver={isOver} \n    // style={{borderColor: borderColor}}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this) //  <SlotView ref={dropRef} className={name} y={p.y - 94} x={18 + p.x} isOver={isOver} />\n  ;\n}, \"JqhsnV51FLbBMrYe3I3IaHXnvkY=\", false, function () {\n  return [usePosition];\n}));\n_c4 = Slot;\nexport default _c5 = observer(PileView);\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"PileView\");\n$RefreshReg$(_c2, \"SlotPileView\");\n$RefreshReg$(_c3, \"Slot$observer\");\n$RefreshReg$(_c4, \"Slot\");\n$RefreshReg$(_c5, \"%default%\");","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/components/ui/PileView.js"],"names":["React","cn","useDrop","observer","CardView","usePosition","useHover","styled","PileView","pile","y","x","length","console","log","p","hoverRef","isHover","isOver","dropRef","accept","drop","item","monitor","card","destination","removeCard","put","destanation","place","collect","turnedCards","cards","filter","isTurned","direction","name","left","top","backgroundColor","map","idx","indentY","indentX","Type","position","zIndex","opacity","SlotPileView","div","Slot"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport cn from \"classnames\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport CardView from \"./CardView\";\r\nimport usePosition from \"../../state/hooks/usePosition\";\r\nimport useHover from \"../../state/hooks/useHover\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\n\r\nfunction PileView({pile, y, x}) {\r\n   if(pile.length)\r\n   console.log(pile)\r\n  const [p] = usePosition(y, x);\r\n  const [hoverRef, isHover] = useHover();\r\n  const [{isOver}, dropRef] = useDrop(() => ({\r\n    accept: \"CARD\",\r\n    drop: (item, monitor) => {\r\n      // const parent = getParent(item.card, 2);\r\n      // parent.remove(item.card);\r\n      // console.log(item.card.destination)\r\n      item.card.destination.removeCard(item.card);\r\n      pile.put(item.card);\r\n      const destanation = item.card.destination;\r\n      return {\r\n        place: pile,\r\n      };\r\n    },\r\n    collect: monitor => ({\r\n      isOver: !!monitor.isOver(),\r\n    }),\r\n  }), [x, y]);\r\n  const turnedCards = pile.cards.filter(card => !card.isTurned);\r\n\r\n  return (\r\n    <div\r\n      ref={dropRef}\r\n      className={cn(\"Pile\", pile.direction.name)}\r\n      style={{left: p.x + \"px\", top: p.y + \"px\", backgroundColor: isOver ? \"red\" : \"inherit\"}}\r\n    >\r\n      <div ref={hoverRef}>\r\n        {pile.cards.map((card, idx) => {\r\n          let indentY = 0.2;\r\n          let indentX = 0.2;\r\n          if (!card.isTurned && isHover && turnedCards.length > 1) {\r\n            indentY = pile.direction.name === \"LeftToRight\" ? 0.8 : 0.2;\r\n            indentX = pile.direction.name === \"TopToBottom\" ? 0.8 : 0.2;\r\n          }\r\n          return (\r\n            <CardView key={idx} card={card} y={idx * indentY} x={idx * indentX}/>\r\n          );\r\n        })}\r\n        {isOver && (\r\n          <div\r\n            className={pile.top ? pile.top.Type : \"Ship\"}\r\n            style={{\r\n              position: \"absolute\",\r\n              zIndex: 1,\r\n              opacity: 0.5,\r\n              backgroundColor: \"red\",\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SlotPileView = styled.div`\r\n  position: absolute;\r\n  border-width: 4px;\r\n  border-style: solid;\r\n  top: ${({y}) => y + \"px\"};\r\n  left: ${({x}) => x + \"px\"};\r\n  z-index: 2;\r\n  border-radius: 20px;\r\n  width: 300px;\r\n  height: 200px;\r\n`;\r\n\r\nconst Slot = observer(({ y, x }) => {\r\n// const Slot = observer(({name, star, y, x, card, slot, isActive }) => {\r\n  const [p] = usePosition(y, x);\r\n//   const [{isOver, canDrop}, dropRef] = useDrop(() => ({\r\n//     accept: \"CARD\",\r\n//     drop: (item, monitor) => {\r\n//       let a = monitor.getItem();\r\n//       if(item.card.Type === card.Name){\r\n//         item.card.destination.removeCard(item.card);\r\n//         star.put(item.card, slot);\r\n//       }\r\n//       return {\r\n//          place: star,\r\n//          name: name,\r\n//       };\r\n//    },\r\n//     collect: monitor => ({\r\n//       isOver: !!monitor.isOver(),\r\n//     }),\r\n//   }), [x, y]);\r\n\r\n  return (\r\n    <SlotPileView \r\n      ref={dropRef} \r\n      // className={card.Name} \r\n      y={p.y - 0} \r\n      x={18 + p.x} \r\n      // isOver={isOver} \r\n      // style={{borderColor: borderColor}}\r\n    />\r\n   //  <SlotView ref={dropRef} className={name} y={p.y - 94} x={18 + p.x} isOver={isOver} />\r\n  );\r\n});\r\n\r\n\r\n\r\nexport default observer(PileView);\r\n"]},"metadata":{},"sourceType":"module"}