{"ast":null,"code":"import Assert from \"./Assert.js\";\n\nclass Type {\n  constructor(name) {\n    this._name = Type.assertName(name);\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  static get Names() {\n    return Names;\n  }\n\n  static get Hero() {\n    return Names.Hero;\n  }\n\n  static get Base() {\n    return Names.Base;\n  }\n\n  static get Ship() {\n    return Names.Ship;\n  }\n\n  static get Colony() {\n    return Names.Colony;\n  }\n\n  static assert(sample) {\n    if (sample instanceof Type) {\n      return sample;\n    }\n\n    if (typeof sample === 'string') {\n      return new Type(sample);\n    }\n\n    if (typeof sample === 'object') {\n      let c = sample.constructor.name;\n\n      if (c === 'Type') {\n        return new Type(sample.name);\n      }\n    }\n\n    Assert.error('wrong Type', sample);\n  }\n\n  static assertName(name) {\n    if (typeof name !== 'string') {\n      Assert.error('wrong Type given', name);\n    }\n\n    name = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n\n    if (Names[name] === undefined) {\n      Assert.error('wrong Type name', name);\n    }\n\n    return Names[name];\n  }\n\n}\n\nconst Names = Object.freeze({\n  Hero: 'Hero',\n  Base: 'Base',\n  Ship: 'Ship',\n  Colony: 'Colony'\n});\nexport default Type;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Type.js"],"names":["Assert","Type","constructor","name","_name","assertName","Names","Hero","Base","Ship","Colony","assert","sample","c","error","charAt","toUpperCase","slice","toLowerCase","undefined","Object","freeze"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKC,KAAL,GAAaH,IAAI,CAACI,UAAL,CAAgBF,IAAhB,CAAb;AACD;;AAEO,MAAJA,IAAI,GAAG;AAAE,WAAO,KAAKC,KAAZ;AAAoB;;AAEjB,aAALE,KAAK,GAAc;AAAE,WAAOA,KAAP;AAAe;;AAChC,aAAJC,IAAI,GAAe;AAAE,WAAOD,KAAK,CAACC,IAAb;AAAoB;;AACrC,aAAJC,IAAI,GAAe;AAAE,WAAOF,KAAK,CAACE,IAAb;AAAoB;;AACrC,aAAJC,IAAI,GAAe;AAAE,WAAOH,KAAK,CAACG,IAAb;AAAoB;;AACnC,aAANC,MAAM,GAAa;AAAE,WAAOJ,KAAK,CAACI,MAAb;AAAsB;;AAEzC,SAANC,MAAM,CAACC,MAAD,EAAS;AACpB,QAAIA,MAAM,YAAYX,IAAtB,EAA6B;AAC3B,aAAOW,MAAP;AACD;;AACD,QAAI,OAAOA,MAAP,KAAmB,QAAvB,EAAiC;AAC/B,aAAO,IAAIX,IAAJ,CAASW,MAAT,CAAP;AACD;;AACD,QAAI,OAAOA,MAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAIC,CAAC,GAAGD,MAAM,CAACV,WAAP,CAAmBC,IAA3B;;AACA,UAAIU,CAAC,KAAK,MAAV,EAAkB;AAChB,eAAO,IAAIZ,IAAJ,CAASW,MAAM,CAACT,IAAhB,CAAP;AACD;AACF;;AACDH,IAAAA,MAAM,CAACc,KAAP,CAAa,YAAb,EAA2BF,MAA3B;AACD;;AAEgB,SAAVP,UAAU,CAACF,IAAD,EAAO;AACtB,QAAI,OAAOA,IAAP,KAAiB,QAArB,EAA+B;AAC7BH,MAAAA,MAAM,CAACc,KAAP,CAAa,kBAAb,EAAiCX,IAAjC;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,CAACY,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+Bb,IAAI,CAACc,KAAL,CAAW,CAAX,EAAcC,WAAd,EAAtC;;AACA,QAAIZ,KAAK,CAACH,IAAD,CAAL,KAAgBgB,SAApB,EAA+B;AAC7BnB,MAAAA,MAAM,CAACc,KAAP,CAAa,iBAAb,EAAgCX,IAAhC;AACD;;AACD,WAAOG,KAAK,CAACH,IAAD,CAAZ;AACD;;AAtCQ;;AAyCX,MAAMG,KAAK,GAAGc,MAAM,CAACC,MAAP,CAAc;AAC1Bd,EAAAA,IAAI,EAAI,MADkB;AAE1BC,EAAAA,IAAI,EAAI,MAFkB;AAG1BC,EAAAA,IAAI,EAAI,MAHkB;AAI1BC,EAAAA,MAAM,EAAE;AAJkB,CAAd,CAAd;AAOA,eAAeT,IAAf","sourcesContent":["import Assert from \"./Assert.js\";\r\n\r\nclass Type {\r\n  constructor(name) {\r\n    this._name = Type.assertName(name);\r\n  }\r\n\r\n  get name() { return this._name; }\r\n\r\n  static get Names()            { return Names; }\r\n  static get Hero()             { return Names.Hero; }\r\n  static get Base()             { return Names.Base; }\r\n  static get Ship()             { return Names.Ship; }\r\n  static get Colony()           { return Names.Colony; }\r\n\r\n  static assert(sample) {\r\n    if (sample instanceof(Type)) {\r\n      return sample;\r\n    }\r\n    if (typeof(sample) === 'string') {\r\n      return new Type(sample);\r\n    }\r\n    if (typeof(sample) === 'object') {\r\n      let c = sample.constructor.name;\r\n      if (c === 'Type') {\r\n        return new Type(sample.name);\r\n      }\r\n    }\r\n    Assert.error('wrong Type', sample);\r\n  }\r\n\r\n  static assertName(name) {\r\n    if (typeof(name) !== 'string') {\r\n      Assert.error('wrong Type given', name);\r\n    }\r\n    name = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\r\n    if (Names[name] === undefined) {\r\n      Assert.error('wrong Type name', name);\r\n    }\r\n    return Names[name];\r\n  }\r\n}\r\n\r\nconst Names = Object.freeze({\r\n  Hero:   'Hero',\r\n  Base:   'Base',\r\n  Ship:   'Ship',\r\n  Colony: 'Colony',\r\n})\r\n\r\nexport default Type;\r\n"]},"metadata":{},"sourceType":"module"}