{"ast":null,"code":"import Card from \"./Card.js\";\nimport Assert from \"./Assert.js\";\n\nclass Star {\n  constructor(field, y, x) {\n    this.field = field;\n    this.y = y;\n    this.x = x;\n    this.ships = [null, null, null, null];\n    this.bases = [null, null, null];\n    this.heroes = [null, null, null, null];\n    this.colonies = [null, null, null];\n    this._parent = null; //  console.log(this);\n  }\n\n  base(slot) {\n    var _this$bases$slot;\n\n    return (_this$bases$slot = this.bases[slot]) !== null && _this$bases$slot !== void 0 ? _this$bases$slot : Card.AbsentBase;\n  }\n\n  hero(slot) {\n    var _this$heroes$slot;\n\n    return (_this$heroes$slot = this.heroes[slot]) !== null && _this$heroes$slot !== void 0 ? _this$heroes$slot : Card.AbsentHero;\n  }\n\n  ship(slot) {\n    var _this$ships$slot;\n\n    return (_this$ships$slot = this.ships[slot]) !== null && _this$ships$slot !== void 0 ? _this$ships$slot : Card.AbsentShip;\n  }\n\n  colony(slot) {\n    var _this$colonies$slot;\n\n    return (_this$colonies$slot = this.colonies[slot]) !== null && _this$colonies$slot !== void 0 ? _this$colonies$slot : Card.AbsentColony;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get hasParent() {\n    return this._parent !== null;\n  }\n\n  setParent(parent) {\n    // if (typeof destination !== typeof undefined) {\n    this._parent = parent; // }\n  }\n\n  put(card, slot) {\n    //   console.log(card, slot);\n    card = Card.assert(card);\n\n    if (card.isBase) {\n      return this.putToSlot(card, slot, this.bases, this);\n    } else if (card.isShip) {\n      return this.putToSlot(card, slot, this.ships, this);\n    } else if (card.isHero) {\n      return this.putToSlot(card, slot, this.heroes, this);\n    } else if (card.isColony) {\n      return this.putToSlot(card, slot, this.colonies, this);\n    }\n\n    Assert.error(\"wrong card type\", card);\n  }\n\n  putToSlot(card, slot, slots, parent) {\n    console.log(card);\n    console.log(slot);\n    console.log(slots);\n    console.log(this);\n\n    if (slots[slot] === undefined) {\n      Assert.error(\"non-existent slot\", slot);\n    }\n\n    if (slots[slot] !== null) {\n      Assert.error(\"slot already taken\", slot);\n    }\n\n    slots[slot] = card;\n    card.setParent(this);\n    return this;\n  }\n\n}\n\nexport default Star;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Star.js"],"names":["Card","Assert","Star","constructor","field","y","x","ships","bases","heroes","colonies","_parent","base","slot","AbsentBase","hero","AbsentHero","ship","AbsentShip","colony","AbsentColony","parent","hasParent","setParent","put","card","assert","isBase","putToSlot","isShip","isHero","isColony","error","slots","console","log","undefined"],"mappings":"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","sourcesContent":["import Card from \"./Card.js\";\r\nimport Assert from \"./Assert.js\";\r\n\r\nclass Star {\r\n  constructor(field, y, x) {\r\n    this.field = field;\r\n    this.y = y;\r\n    this.x = x;\r\n    this.ships = [null, null, null, null];\r\n    this.bases = [null, null, null];\r\n    this.heroes = [null, null, null, null];\r\n    this.colonies = [null, null, null];\r\n    this._parent = null;\r\n    //  console.log(this);\r\n  }\r\n\r\n  base(slot) {\r\n    return this.bases[slot] ?? Card.AbsentBase;\r\n  }\r\n  hero(slot) {\r\n    return this.heroes[slot] ?? Card.AbsentHero;\r\n  }\r\n  ship(slot) {\r\n    return this.ships[slot] ?? Card.AbsentShip;\r\n  }\r\n  colony(slot) {\r\n    return this.colonies[slot] ?? Card.AbsentColony;\r\n  }\r\n\r\n  get parent() {\r\n    return this._parent;\r\n  }\r\n  get hasParent() {\r\n    return this._parent !== null;\r\n  }\r\n\r\n  setParent(parent) {\r\n    // if (typeof destination !== typeof undefined) {\r\n    this._parent = parent;\r\n    // }\r\n  }\r\n\r\n  put(card, slot) {\r\n    //   console.log(card, slot);\r\n    card = Card.assert(card);\r\n    if (card.isBase) {\r\n      return this.putToSlot(card, slot, this.bases, this);\r\n    } else if (card.isShip) {\r\n      return this.putToSlot(card, slot, this.ships, this);\r\n    } else if (card.isHero) {\r\n      return this.putToSlot(card, slot, this.heroes, this);\r\n    } else if (card.isColony) {\r\n      return this.putToSlot(card, slot, this.colonies, this);\r\n    }\r\n    Assert.error(\"wrong card type\", card);\r\n  }\r\n\r\n  putToSlot(card, slot, slots, parent) {\r\n    console.log(card);\r\n    console.log(slot);\r\n    console.log(slots);\r\n    console.log(this);\r\n    if (slots[slot] === undefined) {\r\n      Assert.error(\"non-existent slot\", slot);\r\n    }\r\n    if (slots[slot] !== null) {\r\n      Assert.error(\"slot already taken\", slot);\r\n    }\r\n    slots[slot] = card;\r\n    card.setParent(this);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default Star;\r\n"]},"metadata":{},"sourceType":"module"}