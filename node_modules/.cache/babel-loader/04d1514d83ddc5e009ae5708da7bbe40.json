{"ast":null,"code":"import Specs from \"./Specs.js\";\nimport Decks from \"./Decks.js\";\nimport Action from \"./Action.js\";\nimport Assert from \"./Assert.js\";\n\nclass aCard {\n  constructor(specs) {\n    this._specs = Specs.assert(specs);\n    this._alternative = this.findAlternative(specs.Alternative);\n  }\n\n  get Specs() {\n    return this._specs;\n  }\n\n  get Alternative() {\n    return this._alternative;\n  }\n\n  get Name() {\n    return this.Specs.Name;\n  }\n\n  get Type() {\n    return this.Specs.Type;\n  }\n\n  get Race() {\n    return this.Specs.Race;\n  }\n\n  get Level() {\n    return this.Specs.Level;\n  }\n\n  get Klass() {\n    return this.Specs.Klass;\n  }\n\n  get Requires() {\n    return this.Specs.Requires;\n  }\n\n  get Defense() {\n    return this.Specs.Defense;\n  }\n\n  get Attack() {\n    return this.Specs.Attack;\n  }\n\n  get Colonization() {\n    return this.Specs.Colonization;\n  }\n\n  get Science() {\n    return this.Specs.Science;\n  }\n\n  get Production() {\n    return this.Specs.Production;\n  }\n\n  get Cooperation() {\n    return this.Specs.Cooperation;\n  }\n\n  get Utilization() {\n    return this.Specs.Utilization;\n  }\n\n  get isHero() {\n    return this.isType(Types.Hero);\n  }\n\n  get isColony() {\n    return this.isType(Types.Colony);\n  }\n\n  get isShip() {\n    return this.isType(Types.Ship);\n  }\n\n  get isBase() {\n    return this.isType(Types.Base);\n  }\n\n  isType(type) {\n    return this.Type === type;\n  }\n\n  getValue(prop) {\n    return this.Specs.getValue(prop);\n  }\n\n  static assert(sample) {\n    if (sample instanceof aCard) {\n      return sample;\n    }\n\n    if (typeof sample === 'string') {\n      return new aCard(Decks.get(sample));\n    }\n\n    Assert.error('not a aCard', sample);\n  }\n\n  findAlternative(alt) {\n    if (!alt) {\n      return null;\n    }\n\n    if (typeof alt === 'string') {\n      alt = Action.assert(alt);\n    }\n\n    if (alt instanceof Action) {\n      return Decks.get([this.Race, this.Type, alt.short].join('-'));\n    }\n\n    Assert.error('wrong alternative', alt);\n  }\n\n}\n\nconst Types = Object.freeze({\n  Hero: 'Hero',\n  Base: 'Base',\n  Ship: 'Ship',\n  Colony: 'Colony'\n});\nexport default aCard;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/aCard.js"],"names":["Specs","Decks","Action","Assert","aCard","constructor","specs","_specs","assert","_alternative","findAlternative","Alternative","Name","Type","Race","Level","Klass","Requires","Defense","Attack","Colonization","Science","Production","Cooperation","Utilization","isHero","isType","Types","Hero","isColony","Colony","isShip","Ship","isBase","Base","type","getValue","prop","sample","get","error","alt","short","join","Object","freeze"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,KAAN,CAAY;AACVC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKC,MAAL,GAAcP,KAAK,CAACQ,MAAN,CAAaF,KAAb,CAAd;AACA,SAAKG,YAAL,GAAoB,KAAKC,eAAL,CAAqBJ,KAAK,CAACK,WAA3B,CAApB;AACD;;AAEQ,MAALX,KAAK,GAAe;AAAE,WAAO,KAAKO,MAAZ;AAAqB;;AAChC,MAAXI,WAAW,GAAS;AAAE,WAAO,KAAKF,YAAZ;AAA2B;;AAC7C,MAAJG,IAAI,GAAgB;AAAE,WAAO,KAAKZ,KAAL,CAAWY,IAAlB;AAAyB;;AAC3C,MAAJC,IAAI,GAAgB;AAAE,WAAO,KAAKb,KAAL,CAAWa,IAAlB;AAAyB;;AAC3C,MAAJC,IAAI,GAAgB;AAAE,WAAO,KAAKd,KAAL,CAAWc,IAAlB;AAAyB;;AAC1C,MAALC,KAAK,GAAe;AAAE,WAAO,KAAKf,KAAL,CAAWe,KAAlB;AAA0B;;AAC3C,MAALC,KAAK,GAAe;AAAE,WAAO,KAAKhB,KAAL,CAAWgB,KAAlB;AAA0B;;AACxC,MAARC,QAAQ,GAAY;AAAE,WAAO,KAAKjB,KAAL,CAAWiB,QAAlB;AAA6B;;AAC5C,MAAPC,OAAO,GAAa;AAAE,WAAO,KAAKlB,KAAL,CAAWkB,OAAlB;AAA4B;;AAC5C,MAANC,MAAM,GAAc;AAAE,WAAO,KAAKnB,KAAL,CAAWmB,MAAlB;AAA2B;;AACrC,MAAZC,YAAY,GAAQ;AAAE,WAAO,KAAKpB,KAAL,CAAWoB,YAAlB;AAAiC;;AAChD,MAAPC,OAAO,GAAa;AAAE,WAAO,KAAKrB,KAAL,CAAWqB,OAAlB;AAA4B;;AACxC,MAAVC,UAAU,GAAU;AAAE,WAAO,KAAKtB,KAAL,CAAWsB,UAAlB;AAA+B;;AAC1C,MAAXC,WAAW,GAAS;AAAE,WAAO,KAAKvB,KAAL,CAAWuB,WAAlB;AAAgC;;AAC3C,MAAXC,WAAW,GAAS;AAAE,WAAO,KAAKxB,KAAL,CAAWwB,WAAlB;AAAgC;;AAEhD,MAANC,MAAM,GAAc;AAAE,WAAO,KAAKC,MAAL,CAAYC,KAAK,CAACC,IAAlB,CAAP;AAAiC;;AAC/C,MAARC,QAAQ,GAAY;AAAE,WAAO,KAAKH,MAAL,CAAYC,KAAK,CAACG,MAAlB,CAAP;AAAmC;;AACnD,MAANC,MAAM,GAAc;AAAE,WAAO,KAAKL,MAAL,CAAYC,KAAK,CAACK,IAAlB,CAAP;AAAiC;;AACjD,MAANC,MAAM,GAAc;AAAE,WAAO,KAAKP,MAAL,CAAYC,KAAK,CAACO,IAAlB,CAAP;AAAiC;;AAC3DR,EAAAA,MAAM,CAACS,IAAD,EAAkB;AAAE,WAAO,KAAKtB,IAAL,KAAcsB,IAArB;AAA4B;;AAEtDC,EAAAA,QAAQ,CAACC,IAAD,EAAgB;AAAE,WAAO,KAAKrC,KAAL,CAAWoC,QAAX,CAAoBC,IAApB,CAAP;AAAmC;;AAEhD,SAAN7B,MAAM,CAAC8B,MAAD,EAAS;AACpB,QAAIA,MAAM,YAAYlC,KAAtB,EAA8B;AAC5B,aAAOkC,MAAP;AACD;;AACD,QAAI,OAAOA,MAAP,KAAmB,QAAvB,EAAiC;AAC/B,aAAO,IAAIlC,KAAJ,CAAUH,KAAK,CAACsC,GAAN,CAAUD,MAAV,CAAV,CAAP;AACD;;AACDnC,IAAAA,MAAM,CAACqC,KAAP,CAAa,aAAb,EAA4BF,MAA5B;AACD;;AAED5B,EAAAA,eAAe,CAAC+B,GAAD,EAAM;AACnB,QAAI,CAAEA,GAAN,EAAW;AACT,aAAO,IAAP;AACD;;AACD,QAAI,OAAOA,GAAP,KAAgB,QAApB,EAA8B;AAC5BA,MAAAA,GAAG,GAAGvC,MAAM,CAACM,MAAP,CAAciC,GAAd,CAAN;AACD;;AACD,QAAIA,GAAG,YAAYvC,MAAnB,EAA2B;AACzB,aAAOD,KAAK,CAACsC,GAAN,CAAU,CAAC,KAAKzB,IAAN,EAAY,KAAKD,IAAjB,EAAuB4B,GAAG,CAACC,KAA3B,EAAkCC,IAAlC,CAAuC,GAAvC,CAAV,CAAP;AACD;;AACDxC,IAAAA,MAAM,CAACqC,KAAP,CAAa,mBAAb,EAAkCC,GAAlC;AACD;;AAnDS;;AAsDZ,MAAMd,KAAK,GAAGiB,MAAM,CAACC,MAAP,CAAc;AAC1BjB,EAAAA,IAAI,EAAI,MADkB;AAE1BM,EAAAA,IAAI,EAAI,MAFkB;AAG1BF,EAAAA,IAAI,EAAI,MAHkB;AAI1BF,EAAAA,MAAM,EAAE;AAJkB,CAAd,CAAd;AAOA,eAAe1B,KAAf","sourcesContent":["import Specs from \"./Specs.js\";\r\nimport Decks from \"./Decks.js\";\r\nimport Action from \"./Action.js\";\r\nimport Assert from \"./Assert.js\";\r\n\r\nclass aCard {\r\n  constructor(specs) {\r\n    this._specs = Specs.assert(specs);\r\n    this._alternative = this.findAlternative(specs.Alternative);\r\n  }\r\n\r\n  get Specs()             { return this._specs; }\r\n  get Alternative()       { return this._alternative; }\r\n  get Name()              { return this.Specs.Name; }\r\n  get Type()              { return this.Specs.Type; }\r\n  get Race()              { return this.Specs.Race; }\r\n  get Level()             { return this.Specs.Level; }\r\n  get Klass()             { return this.Specs.Klass; }\r\n  get Requires()          { return this.Specs.Requires; }\r\n  get Defense()           { return this.Specs.Defense; }\r\n  get Attack()            { return this.Specs.Attack; }\r\n  get Colonization()      { return this.Specs.Colonization; }\r\n  get Science()           { return this.Specs.Science; }\r\n  get Production()        { return this.Specs.Production; }\r\n  get Cooperation()       { return this.Specs.Cooperation; }\r\n  get Utilization()       { return this.Specs.Utilization; }\r\n\r\n  get isHero()            { return this.isType(Types.Hero); }\r\n  get isColony()          { return this.isType(Types.Colony); }\r\n  get isShip()            { return this.isType(Types.Ship); }\r\n  get isBase()            { return this.isType(Types.Base); }\r\n  isType(type)            { return this.Type === type; }\r\n\r\n  getValue(prop)          { return this.Specs.getValue(prop); }\r\n\r\n  static assert(sample) {\r\n    if (sample instanceof(aCard)) {\r\n      return sample;\r\n    }\r\n    if (typeof(sample) === 'string') {\r\n      return new aCard(Decks.get(sample));\r\n    }\r\n    Assert.error('not a aCard', sample);\r\n  }\r\n\r\n  findAlternative(alt) {\r\n    if (! alt) {\r\n      return null;\r\n    }\r\n    if (typeof(alt) === 'string') {\r\n      alt = Action.assert(alt);\r\n    }\r\n    if (alt instanceof Action) {\r\n      return Decks.get([this.Race, this.Type, alt.short].join('-'));\r\n    }\r\n    Assert.error('wrong alternative', alt);\r\n  }\r\n}\r\n\r\nconst Types = Object.freeze({\r\n  Hero:   'Hero',\r\n  Base:   'Base',\r\n  Ship:   'Ship',\r\n  Colony: 'Colony',\r\n})\r\n\r\nexport default aCard;\r\n"]},"metadata":{},"sourceType":"module"}