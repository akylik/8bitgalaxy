{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef } from \"react\";\n\nfunction useHover() {\n  _s();\n\n  const [value, setValue] = useState(false); // Wrap in useCallback so we can use in dependencies below\n\n  const handleMouseOver = useCallback(() => setValue(true), []);\n  const handleMouseOut = useCallback(() => setValue(false), []); // Keep track of the last node passed to callbackRef\n  // so we can remove its event listeners.\n\n  const ref = useRef(); // Use a callback ref instead of useEffect so that event listeners\n  // get changed in the case that the returned ref gets added to\n  // a different element later. With useEffect, changes to ref.current\n  // wouldn't cause a rerender and thus the effect would run again.\n\n  const callbackRef = useCallback(node => {\n    if (ref.current) {\n      ref.current.removeEventListener(\"mouseover\", handleMouseOver);\n      ref.current.removeEventListener(\"mouseout\", handleMouseOut);\n    }\n\n    ref.current = node;\n\n    if (ref.current) {\n      ref.current.addEventListener(\"mouseover\", handleMouseOver);\n      ref.current.addEventListener(\"mouseout\", handleMouseOut);\n    }\n  }, [handleMouseOver, handleMouseOut]);\n  return [callbackRef, value];\n}\n\n_s(useHover, \"TW77L4mu7Ju4XRF9hDjnlv9n0mI=\");\n\nexport default useHover;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/state/hooks/useHover.js"],"names":["React","useState","useCallback","useRef","useHover","value","setValue","handleMouseOver","handleMouseOut","ref","callbackRef","node","current","removeEventListener","addEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,WAAzB,EAAsCC,MAAtC,QAAmD,OAAnD;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,KAAD,CAAlC,CADkB,CAGlB;;AACA,QAAMM,eAAe,GAAGL,WAAW,CAAC,MAAMI,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAAnC;AACA,QAAME,cAAc,GAAGN,WAAW,CAAC,MAAMI,QAAQ,CAAC,KAAD,CAAf,EAAwB,EAAxB,CAAlC,CALkB,CAOlB;AACA;;AACA,QAAMG,GAAG,GAAGN,MAAM,EAAlB,CATkB,CAWlB;AACA;AACA;AACA;;AACA,QAAMO,WAAW,GAAGR,WAAW,CAC7BS,IAAI,IAAI;AACN,QAAIF,GAAG,CAACG,OAAR,EAAiB;AACfH,MAAAA,GAAG,CAACG,OAAJ,CAAYC,mBAAZ,CAAgC,WAAhC,EAA6CN,eAA7C;AACAE,MAAAA,GAAG,CAACG,OAAJ,CAAYC,mBAAZ,CAAgC,UAAhC,EAA4CL,cAA5C;AACD;;AAEDC,IAAAA,GAAG,CAACG,OAAJ,GAAcD,IAAd;;AAEA,QAAIF,GAAG,CAACG,OAAR,EAAiB;AACfH,MAAAA,GAAG,CAACG,OAAJ,CAAYE,gBAAZ,CAA6B,WAA7B,EAA0CP,eAA1C;AACAE,MAAAA,GAAG,CAACG,OAAJ,CAAYE,gBAAZ,CAA6B,UAA7B,EAAyCN,cAAzC;AACD;AACF,GAb4B,EAc7B,CAACD,eAAD,EAAkBC,cAAlB,CAd6B,CAA/B;AAiBA,SAAO,CAACE,WAAD,EAAcL,KAAd,CAAP;AACD;;GAjCQD,Q;;AAmCT,eAAeA,QAAf","sourcesContent":["import React, {useState, useCallback, useRef} from \"react\";\r\n\r\nfunction useHover() {\r\n  const [value, setValue] = useState(false);\r\n\r\n  // Wrap in useCallback so we can use in dependencies below\r\n  const handleMouseOver = useCallback(() => setValue(true), []);\r\n  const handleMouseOut = useCallback(() => setValue(false), []);\r\n\r\n  // Keep track of the last node passed to callbackRef\r\n  // so we can remove its event listeners.\r\n  const ref = useRef();\r\n\r\n  // Use a callback ref instead of useEffect so that event listeners\r\n  // get changed in the case that the returned ref gets added to\r\n  // a different element later. With useEffect, changes to ref.current\r\n  // wouldn't cause a rerender and thus the effect would run again.\r\n  const callbackRef = useCallback(\r\n    node => {\r\n      if (ref.current) {\r\n        ref.current.removeEventListener(\"mouseover\", handleMouseOver);\r\n        ref.current.removeEventListener(\"mouseout\", handleMouseOut);\r\n      }\r\n\r\n      ref.current = node;\r\n\r\n      if (ref.current) {\r\n        ref.current.addEventListener(\"mouseover\", handleMouseOver);\r\n        ref.current.addEventListener(\"mouseout\", handleMouseOut);\r\n      }\r\n    },\r\n    [handleMouseOver, handleMouseOut],\r\n  );\r\n\r\n  return [callbackRef, value];\r\n}\r\n\r\nexport default useHover;"]},"metadata":{},"sourceType":"module"}