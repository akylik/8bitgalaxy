{"ast":null,"code":"import Card from \"./Card.js\";\nimport Assert from \"./Assert.js\";\n\nclass Star {\n  constructor(field, y, x) {\n    this.field = field;\n    this.y = y;\n    this.x = x;\n    this.ships = [null, null, null, null];\n    this.bases = [null, null, null];\n    this.heroes = [null, null, null, null];\n    this.colonies = [null, null, null];\n  }\n\n  base(slot) {\n    var _this$bases$slot;\n\n    return (_this$bases$slot = this.bases[slot]) !== null && _this$bases$slot !== void 0 ? _this$bases$slot : Card.AbsentBase;\n  }\n\n  hero(slot) {\n    var _this$heroes$slot;\n\n    return (_this$heroes$slot = this.heroes[slot]) !== null && _this$heroes$slot !== void 0 ? _this$heroes$slot : Card.AbsentHero;\n  }\n\n  ship(slot) {\n    var _this$ships$slot;\n\n    return (_this$ships$slot = this.ships[slot]) !== null && _this$ships$slot !== void 0 ? _this$ships$slot : Card.AbsentShip;\n  }\n\n  colony(slot) {\n    var _this$colonies$slot;\n\n    return (_this$colonies$slot = this.colonies[slot]) !== null && _this$colonies$slot !== void 0 ? _this$colonies$slot : Card.AbsentColony;\n  }\n\n  removeCard(card) {\n    if (card.isBase) {\n      this.bases.reduce((acc, base) => {\n        if (card === base) {\n          acc.pop();\n        }\n\n        return acc;\n      }, this.bases);\n    } else if (card.isShip) {\n      this.ships.reduce((acc, ship) => {\n        if (card === ship) {\n          acc.pop();\n        }\n\n        return acc;\n      }, this.ships);\n    } else if (card.isHero) {\n      this.heroes.reduce((acc, hero) => {\n        if (card === hero) {\n          acc.pop();\n        }\n\n        return acc;\n      }, this.heroes);\n    } else if (card.isColony) {\n      this.colonies.reduce((acc, colony) => {\n        if (card === colony) {\n          acc.pop();\n        }\n\n        return acc;\n      }, this.colonies);\n    }\n  }\n\n  put(card, slot) {\n    console.log(card, slot);\n    card = Card.assert(card);\n    card.setDestination(this);\n\n    if (card.isBase) {\n      return this.putToSlot(card, slot, this.bases);\n    } else if (card.isShip) {\n      return this.putToSlot(card, slot, this.ships);\n    } else if (card.isHero) {\n      return this.putToSlot(card, slot, this.heroes);\n    } else if (card.isColony) {\n      return this.putToSlot(card, slot, this.colonies);\n    }\n\n    Assert.error('wrong card type', card);\n  }\n\n  putToSlot(card, slot, slots) {\n    console.log(slots);\n\n    if (slots[slot] === undefined) {\n      Assert.error('non-existent slot', slot);\n    }\n\n    if (slots[slot] !== null) {\n      Assert.error('slot already taken', slot);\n    }\n\n    slots[slot] = card;\n    return this;\n  }\n\n}\n\nexport default Star;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Star.js"],"names":["Card","Assert","Star","constructor","field","y","x","ships","bases","heroes","colonies","base","slot","AbsentBase","hero","AbsentHero","ship","AbsentShip","colony","AbsentColony","removeCard","card","isBase","reduce","acc","pop","isShip","isHero","isColony","put","console","log","assert","setDestination","putToSlot","error","slots","undefined"],"mappings":"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","sourcesContent":["import Card from \"./Card.js\";\r\nimport Assert from \"./Assert.js\";\r\n\r\nclass Star {\r\n  constructor(field, y, x) {\r\n    this.field = field;\r\n    this.y = y;\r\n    this.x = x;\r\n    this.ships = [null, null, null, null];\r\n    this.bases = [null, null, null];\r\n    this.heroes = [null, null, null, null];\r\n    this.colonies = [null, null, null];\r\n  }\r\n\r\n  base(slot)    { return this.bases[slot]     ?? Card.AbsentBase; }\r\n  hero(slot)    { return this.heroes[slot]    ?? Card.AbsentHero; }\r\n  ship(slot)    { return this.ships[slot]     ?? Card.AbsentShip; }\r\n  colony(slot)  { return this.colonies[slot]  ?? Card.AbsentColony; }\r\n\r\n  removeCard(card) {\r\n   if (card.isBase) {\r\n      this.bases.reduce((acc, base) => {\r\n         if(card===base) {acc.pop()}\r\n         return acc;\r\n      }, this.bases);\r\n   }\r\n   else if (card.isShip) {\r\n      this.ships.reduce((acc, ship) => {\r\n         if(card===ship) {acc.pop()}\r\n         return acc;\r\n      }, this.ships);\r\n   }\r\n   else if (card.isHero) {\r\n      this.heroes.reduce((acc, hero) => {\r\n         if(card===hero) {acc.pop()}\r\n         return acc;\r\n      }, this.heroes);\r\n   }\r\n   else if (card.isColony) {\r\n      this.colonies.reduce((acc, colony) => {\r\n         if(card===colony) {acc.pop()}\r\n         return acc;\r\n      }, this.colonies);\r\n   }\r\n  }\r\n\r\n  put(card, slot) {\r\n     console.log(card, slot)\r\n     card = Card.assert(card);\r\n     card.setDestination(this);\r\n    if (card.isBase) {\r\n      return this.putToSlot(card, slot, this.bases);\r\n    } else if (card.isShip) {\r\n      return this.putToSlot(card, slot, this.ships);\r\n    } else if (card.isHero) {\r\n      return this.putToSlot(card, slot, this.heroes);\r\n    } else if (card.isColony) {\r\n      return this.putToSlot(card, slot, this.colonies);\r\n    }\r\n    Assert.error('wrong card type', card);\r\n  }\r\n\r\n  putToSlot(card, slot, slots) {\r\n     console.log(slots)\r\n    if (slots[slot] === undefined) {\r\n      Assert.error('non-existent slot', slot);\r\n    }\r\n    if (slots[slot] !== null) {\r\n      Assert.error('slot already taken', slot);\r\n    }\r\n    slots[slot] = card;\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default Star;\r\n"]},"metadata":{},"sourceType":"module"}