{"ast":null,"code":"import Card from \"./Card.js\";\nimport Assert from \"./Assert.js\";\n\nclass Star {\n  constructor(field, y, x) {\n    this.field = field;\n    this.y = y;\n    this.x = x;\n    this.ships = [null, null, null, null];\n    this.bases = [null, null, null];\n    this.heroes = [null, null, null, null];\n    this.colonies = [null, null, null];\n    this._parent = null;\n  }\n\n  base(slot) {\n    var _this$bases$slot;\n\n    return (_this$bases$slot = this.bases[slot]) !== null && _this$bases$slot !== void 0 ? _this$bases$slot : Card.AbsentBase;\n  }\n\n  hero(slot) {\n    var _this$heroes$slot;\n\n    return (_this$heroes$slot = this.heroes[slot]) !== null && _this$heroes$slot !== void 0 ? _this$heroes$slot : Card.AbsentHero;\n  }\n\n  ship(slot) {\n    var _this$ships$slot;\n\n    return (_this$ships$slot = this.ships[slot]) !== null && _this$ships$slot !== void 0 ? _this$ships$slot : Card.AbsentShip;\n  }\n\n  colony(slot) {\n    var _this$colonies$slot;\n\n    return (_this$colonies$slot = this.colonies[slot]) !== null && _this$colonies$slot !== void 0 ? _this$colonies$slot : Card.AbsentColony;\n  }\n\n  put(card, slot) {\n    card = Card.assert(card);\n    card.setDestination(this);\n\n    if (card.isBase) {\n      return this.putToSlot(card, slot, this.bases);\n    } else if (card.isShip) {\n      return this.putToSlot(card, slot, this.ships);\n    } else if (card.isHero) {\n      return this.putToSlot(card, slot, this.heroes);\n    } else if (card.isColony) {\n      return this.putToSlot(card, slot, this.colonies);\n    }\n\n    Assert.error('wrong card type', card);\n  }\n\n  putToSlot(card, slot, slots) {\n    if (slots[slot] === undefined) {\n      Assert.error('non-existent slot', slot);\n    }\n\n    if (slots[slot] !== null) {\n      Assert.error('slot already taken', slot);\n    }\n\n    slots[slot] = card;\n    return this;\n  }\n\n}\n\nexport default Star;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Star.js"],"names":["Card","Assert","Star","constructor","field","y","x","ships","bases","heroes","colonies","_parent","base","slot","AbsentBase","hero","AbsentHero","ship","AbsentShip","colony","AbsentColony","put","card","assert","setDestination","isBase","putToSlot","isShip","isHero","isColony","error","slots","undefined"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,KAAD,EAAQC,CAAR,EAAWC,CAAX,EAAc;AACvB,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,KAAL,GAAa,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAb;AACA,SAAKC,KAAL,GAAa,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAb;AACA,SAAKC,MAAL,GAAc,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAd;AACA,SAAKC,QAAL,GAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAhB;AACA,SAAKC,OAAL,GAAe,IAAf;AACD;;AAEDC,EAAAA,IAAI,CAACC,IAAD,EAAY;AAAA;;AAAE,+BAAO,KAAKL,KAAL,CAAWK,IAAX,CAAP,+DAA+Bb,IAAI,CAACc,UAApC;AAAiD;;AACnEC,EAAAA,IAAI,CAACF,IAAD,EAAY;AAAA;;AAAE,gCAAO,KAAKJ,MAAL,CAAYI,IAAZ,CAAP,iEAA+Bb,IAAI,CAACgB,UAApC;AAAiD;;AACnEC,EAAAA,IAAI,CAACJ,IAAD,EAAY;AAAA;;AAAE,+BAAO,KAAKN,KAAL,CAAWM,IAAX,CAAP,+DAA+Bb,IAAI,CAACkB,UAApC;AAAiD;;AACnEC,EAAAA,MAAM,CAACN,IAAD,EAAU;AAAA;;AAAE,kCAAO,KAAKH,QAAL,CAAcG,IAAd,CAAP,qEAA+Bb,IAAI,CAACoB,YAApC;AAAmD;;AAEpEC,EAAAA,GAAG,CAACC,IAAD,EAAOT,IAAP,EAAa;AACbS,IAAAA,IAAI,GAAGtB,IAAI,CAACuB,MAAL,CAAYD,IAAZ,CAAP;AACAA,IAAAA,IAAI,CAACE,cAAL,CAAoB,IAApB;;AACF,QAAIF,IAAI,CAACG,MAAT,EAAiB;AACf,aAAO,KAAKC,SAAL,CAAeJ,IAAf,EAAqBT,IAArB,EAA2B,KAAKL,KAAhC,CAAP;AACD,KAFD,MAEO,IAAIc,IAAI,CAACK,MAAT,EAAiB;AACtB,aAAO,KAAKD,SAAL,CAAeJ,IAAf,EAAqBT,IAArB,EAA2B,KAAKN,KAAhC,CAAP;AACD,KAFM,MAEA,IAAIe,IAAI,CAACM,MAAT,EAAiB;AACtB,aAAO,KAAKF,SAAL,CAAeJ,IAAf,EAAqBT,IAArB,EAA2B,KAAKJ,MAAhC,CAAP;AACD,KAFM,MAEA,IAAIa,IAAI,CAACO,QAAT,EAAmB;AACxB,aAAO,KAAKH,SAAL,CAAeJ,IAAf,EAAqBT,IAArB,EAA2B,KAAKH,QAAhC,CAAP;AACD;;AACDT,IAAAA,MAAM,CAAC6B,KAAP,CAAa,iBAAb,EAAgCR,IAAhC;AACD;;AAEAI,EAAAA,SAAS,CAACJ,IAAD,EAAOT,IAAP,EAAakB,KAAb,EAAoB;AAE5B,QAAIA,KAAK,CAAClB,IAAD,CAAL,KAAgBmB,SAApB,EAA+B;AAC7B/B,MAAAA,MAAM,CAAC6B,KAAP,CAAa,mBAAb,EAAkCjB,IAAlC;AACD;;AACD,QAAIkB,KAAK,CAAClB,IAAD,CAAL,KAAgB,IAApB,EAA0B;AACxBZ,MAAAA,MAAM,CAAC6B,KAAP,CAAa,oBAAb,EAAmCjB,IAAnC;AACD;;AACDkB,IAAAA,KAAK,CAAClB,IAAD,CAAL,GAAcS,IAAd;AACA,WAAO,IAAP;AACD;;AA1CQ;;AA6CX,eAAepB,IAAf","sourcesContent":["import Card from \"./Card.js\";\r\nimport Assert from \"./Assert.js\";\r\n\r\nclass Star {\r\n  constructor(field, y, x) {\r\n    this.field = field;\r\n    this.y = y;\r\n    this.x = x;\r\n    this.ships = [null, null, null, null];\r\n    this.bases = [null, null, null];\r\n    this.heroes = [null, null, null, null];\r\n    this.colonies = [null, null, null];\r\n    this._parent = null;\r\n  }\r\n\r\n  base(slot)      { return this.bases[slot]     ?? Card.AbsentBase; }\r\n  hero(slot)      { return this.heroes[slot]    ?? Card.AbsentHero; }\r\n  ship(slot)      { return this.ships[slot]     ?? Card.AbsentShip; }\r\n  colony(slot)    { return this.colonies[slot]  ?? Card.AbsentColony; }\r\n   \r\n   put(card, slot) {\r\n      card = Card.assert(card);\r\n      card.setDestination(this);\r\n    if (card.isBase) {\r\n      return this.putToSlot(card, slot, this.bases);\r\n    } else if (card.isShip) {\r\n      return this.putToSlot(card, slot, this.ships);\r\n    } else if (card.isHero) {\r\n      return this.putToSlot(card, slot, this.heroes);\r\n    } else if (card.isColony) {\r\n      return this.putToSlot(card, slot, this.colonies);\r\n    }\r\n    Assert.error('wrong card type', card);\r\n  }\r\n\r\n   putToSlot(card, slot, slots) {\r\n\r\n    if (slots[slot] === undefined) {\r\n      Assert.error('non-existent slot', slot);\r\n    }\r\n    if (slots[slot] !== null) {\r\n      Assert.error('slot already taken', slot);\r\n    }\r\n    slots[slot] = card;\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default Star;\r\n"]},"metadata":{},"sourceType":"module"}