{"ast":null,"code":"import Assert from \"./Assert.js\";\n\nclass Prop {\n  constructor(name) {\n    this._name = Prop.assertName(name);\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  static get Names() {\n    return Names;\n  }\n\n  static get Name() {\n    return Names.Name;\n  }\n\n  static get Type() {\n    return Names.Type;\n  }\n\n  static get Race() {\n    return Names.Race;\n  }\n\n  static get Level() {\n    return Names.Level;\n  }\n\n  static get Klass() {\n    return Names.Klass;\n  }\n\n  static get Requires() {\n    return Names.Requires;\n  }\n\n  static get Require1() {\n    return Names.Require1;\n  }\n\n  static get Require2() {\n    return Names.Require2;\n  }\n\n  static get Require3() {\n    return Names.Require3;\n  }\n\n  static get Defense() {\n    return Names.Defense;\n  }\n\n  static get Attack() {\n    return Names.Attack;\n  }\n\n  static get Colonization() {\n    return Names.Colonization;\n  }\n\n  static get Production() {\n    return Names.Production;\n  }\n\n  static get Science() {\n    return Names.Science;\n  }\n\n  static get Cooperation() {\n    return Names.Cooperation;\n  }\n\n  static get Alternative() {\n    return Names.Alternative;\n  }\n\n  static get Utilization() {\n    return Names.Utilization;\n  }\n\n  static get Parent() {\n    return Names.Parent;\n  }\n\n  static assert(sample) {\n    if (sample instanceof Prop) {\n      return sample;\n    }\n\n    if (typeof sample === \"string\") {\n      return new Prop(sample);\n    }\n\n    if (typeof sample === \"object\") {\n      let c = sample.constructor.name;\n\n      if (c === \"Klass\") {\n        return new Prop(sample.name);\n      }\n    }\n\n    Assert.error(\"wrong Prop\", sample);\n  }\n\n  static assertName(name) {\n    if (typeof name !== \"string\") {\n      Assert.error(\"wrong Prop given\", name);\n    }\n\n    name = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n\n    if (Names[name] === undefined) {\n      Assert.error(\"wrong Prop name\", name);\n    }\n\n    return Names[name];\n  }\n\n}\n\nconst Names = Object.freeze({\n  Name: 'Name',\n  Type: 'Type',\n  Race: 'Race',\n  Level: 'Level',\n  Klass: 'Klass',\n  Requires: 'Requires',\n  Require1: 'Require1',\n  Require2: 'Require2',\n  Require3: 'Require3',\n  Defense: 'Defense',\n  Attack: 'Attack',\n  Colonization: 'Colonization',\n  Science: 'Science',\n  Production: 'Production',\n  Cooperation: 'Cooperation',\n  Alternative: 'Alternative',\n  Utilization: 'Utilization'\n});\nexport default Prop;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Prop.js"],"names":["Assert","Prop","constructor","name","_name","assertName","Names","Name","Type","Race","Level","Klass","Requires","Require1","Require2","Require3","Defense","Attack","Colonization","Production","Science","Cooperation","Alternative","Utilization","Parent","assert","sample","c","error","charAt","toUpperCase","slice","toLowerCase","undefined","Object","freeze"],"mappings":"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","sourcesContent":["import Assert from \"./Assert.js\";\r\n\r\nclass Prop {\r\n  constructor(name) {\r\n    this._name = Prop.assertName(name);\r\n  }\r\n\r\n  get name() {\r\n    return this._name;\r\n  }\r\n\r\n  static get Names() {\r\n    return Names;\r\n  }\r\n  static get Name() {\r\n    return Names.Name;\r\n  }\r\n  static get Type() {\r\n    return Names.Type;\r\n  }\r\n  static get Race() {\r\n    return Names.Race;\r\n  }\r\n  static get Level() {\r\n    return Names.Level;\r\n  }\r\n  static get Klass() {\r\n    return Names.Klass;\r\n  }\r\n  static get Requires() {\r\n    return Names.Requires;\r\n  }\r\n  static get Require1() {\r\n    return Names.Require1;\r\n  }\r\n  static get Require2() {\r\n    return Names.Require2;\r\n  }\r\n  static get Require3() {\r\n    return Names.Require3;\r\n  }\r\n  static get Defense() {\r\n    return Names.Defense;\r\n  }\r\n  static get Attack() {\r\n    return Names.Attack;\r\n  }\r\n  static get Colonization() {\r\n    return Names.Colonization;\r\n  }\r\n  static get Production() {\r\n    return Names.Production;\r\n  }\r\n  static get Science() {\r\n    return Names.Science;\r\n  }\r\n  static get Cooperation() {\r\n    return Names.Cooperation;\r\n  }\r\n  static get Alternative() {\r\n    return Names.Alternative;\r\n  }\r\n  static get Utilization() {\r\n    return Names.Utilization;\r\n  }\r\n\r\n  static get Parent() {\r\n    return Names.Parent;\r\n  }\r\n\r\n  static assert(sample) {\r\n    if (sample instanceof Prop) {\r\n      return sample;\r\n    }\r\n    if (typeof sample === \"string\") {\r\n      return new Prop(sample);\r\n    }\r\n    if (typeof sample === \"object\") {\r\n      let c = sample.constructor.name;\r\n      if (c === \"Klass\") {\r\n        return new Prop(sample.name);\r\n      }\r\n    }\r\n    Assert.error(\"wrong Prop\", sample);\r\n  }\r\n\r\n  static assertName(name) {\r\n    if (typeof name !== \"string\") {\r\n      Assert.error(\"wrong Prop given\", name);\r\n    }\r\n    name = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\r\n    if (Names[name] === undefined) {\r\n      Assert.error(\"wrong Prop name\", name);\r\n    }\r\n    return Names[name];\r\n  }\r\n}\r\n\r\nconst Names = Object.freeze({\r\n  Name:               'Name',\r\n  Type:               'Type',\r\n  Race:               'Race',\r\n  Level:              'Level',\r\n  Klass:              'Klass',\r\n  Requires:           'Requires',\r\n  Require1:           'Require1',\r\n  Require2:           'Require2',\r\n  Require3:           'Require3',\r\n  Defense:            'Defense',\r\n  Attack:             'Attack',\r\n  Colonization:       'Colonization',\r\n  Science:            'Science',\r\n  Production:         'Production',\r\n  Cooperation:        'Cooperation',\r\n  Alternative:        'Alternative',\r\n  Utilization:        'Utilization',\r\n})\r\n\r\nexport default Prop;\r\n"]},"metadata":{},"sourceType":"module"}