{"ast":null,"code":"import Pile from \"./Pile.js\";\nimport Assert from \"./Assert.js\";\nimport Direction from \"./Direction.js\";\n\nclass Row {\n  constructor(type, direction, size) {\n    this._type = Row.assertType(type);\n    this._direction = Direction.assert(direction);\n    this._piles = [];\n    this.initPiles(size);\n  }\n\n  initPiles(size) {\n    let piles = Types[this.type];\n\n    for (var i = 0, len = piles.length; i < len; i++) {\n      this._piles.push(new Pile(piles[i], this.direction.counterpart));\n    }\n  }\n\n  get isMain() {\n    return this.isType(Types.Main);\n  }\n\n  get direction() {\n    return this._direction;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get size() {\n    return this._piles.length;\n  }\n\n  get last() {\n    return this._piles[0];\n  }\n\n  get piles() {\n    return this._piles;\n  }\n\n  pile(no) {\n    return this.piles[this.assertNo(no)];\n  }\n\n  isType(type) {\n    return this._type === type;\n  }\n\n  assertNo(no) {\n    if (no < 0 || no >= this.size) {\n      Assert.error('wrong pile no', no);\n    }\n\n    return no;\n  }\n\n  static assertType(type) {\n    if (Types[type] === undefined) {\n      Assert.error('wrong Row type', type);\n    }\n\n    return type;\n  }\n\n}\n\nconst Types = Object.freeze({\n  Estate: ['Reserve', 'Hand', 'Techs', 'Assets', 'Missions'],\n  Factory: ['Scrap', 'Factory', 'Factory', 'Factory'],\n  Research: ['Ideas', 'Research', 'Research', 'Research', 'Research']\n});\nexport default Row;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Row.js"],"names":["Pile","Assert","Direction","Row","constructor","type","direction","size","_type","assertType","_direction","assert","_piles","initPiles","piles","Types","i","len","length","push","counterpart","isMain","isType","Main","last","pile","no","assertNo","error","undefined","Object","freeze","Estate","Factory","Research"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,MAAMC,GAAN,CAAU;AACRC,EAAAA,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkBC,IAAlB,EAAwB;AACjC,SAAKC,KAAL,GAAaL,GAAG,CAACM,UAAJ,CAAeJ,IAAf,CAAb;AACA,SAAKK,UAAL,GAAkBR,SAAS,CAACS,MAAV,CAAiBL,SAAjB,CAAlB;AACA,SAAKM,MAAL,GAAc,EAAd;AACA,SAAKC,SAAL,CAAeN,IAAf;AACD;;AAEDM,EAAAA,SAAS,CAACN,IAAD,EAAO;AACd,QAAIO,KAAK,GAAGC,KAAK,CAAC,KAAKV,IAAN,CAAjB;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,KAAK,CAACI,MAA5B,EAAoCF,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,WAAKJ,MAAL,CAAYO,IAAZ,CAAiB,IAAInB,IAAJ,CAASc,KAAK,CAACE,CAAD,CAAd,EAAmB,KAAKV,SAAL,CAAec,WAAlC,CAAjB;AACD;AACF;;AAES,MAANC,MAAM,GAAM;AAAE,WAAO,KAAKC,MAAL,CAAYP,KAAK,CAACQ,IAAlB,CAAP;AAAiC;;AACtC,MAATjB,SAAS,GAAG;AAAE,WAAO,KAAKI,UAAZ;AAAyB;;AACnC,MAAJL,IAAI,GAAQ;AAAE,WAAO,KAAKG,KAAZ;AAAoB;;AAC9B,MAAJD,IAAI,GAAQ;AAAE,WAAO,KAAKK,MAAL,CAAYM,MAAnB;AAA4B;;AACtC,MAAJM,IAAI,GAAQ;AAAE,WAAO,KAAKZ,MAAL,CAAY,CAAZ,CAAP;AAAwB;;AACjC,MAALE,KAAK,GAAO;AAAE,WAAO,KAAKF,MAAZ;AAAqB;;AAEvCa,EAAAA,IAAI,CAACC,EAAD,EAAY;AAAE,WAAO,KAAKZ,KAAL,CAAW,KAAKa,QAAL,CAAcD,EAAd,CAAX,CAAP;AAAuC;;AACzDJ,EAAAA,MAAM,CAACjB,IAAD,EAAU;AAAE,WAAO,KAAKG,KAAL,KAAeH,IAAtB;AAA6B;;AAE/CsB,EAAAA,QAAQ,CAACD,EAAD,EAAK;AACX,QAAIA,EAAE,GAAC,CAAH,IAAQA,EAAE,IAAE,KAAKnB,IAArB,EAA2B;AACzBN,MAAAA,MAAM,CAAC2B,KAAP,CAAa,eAAb,EAA8BF,EAA9B;AACD;;AACD,WAAOA,EAAP;AACD;;AAEgB,SAAVjB,UAAU,CAACJ,IAAD,EAAO;AACtB,QAAIU,KAAK,CAACV,IAAD,CAAL,KAAgBwB,SAApB,EAA+B;AAC7B5B,MAAAA,MAAM,CAAC2B,KAAP,CAAa,gBAAb,EAAgCvB,IAAhC;AACD;;AACD,WAAOA,IAAP;AACD;;AArCO;;AAwCV,MAAMU,KAAK,GAAGe,MAAM,CAACC,MAAP,CAAc;AAC1BC,EAAAA,MAAM,EAAM,CAAC,SAAD,EAAY,MAAZ,EAAoB,OAApB,EAA6B,QAA7B,EAAuC,UAAvC,CADc;AAE1BC,EAAAA,OAAO,EAAK,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB,EAAgC,SAAhC,CAFc;AAG1BC,EAAAA,QAAQ,EAAI,CAAC,OAAD,EAAU,UAAV,EAAsB,UAAtB,EAAkC,UAAlC,EAA8C,UAA9C;AAHc,CAAd,CAAd;AAMA,eAAe/B,GAAf","sourcesContent":["import Pile from \"./Pile.js\";\r\nimport Assert from \"./Assert.js\";\r\nimport Direction from \"./Direction.js\";\r\n\r\nclass Row {\r\n  constructor(type, direction, size) {\r\n    this._type = Row.assertType(type);\r\n    this._direction = Direction.assert(direction);\r\n    this._piles = [];\r\n    this.initPiles(size);\r\n  }\r\n\r\n  initPiles(size) {\r\n    let piles = Types[this.type];\r\n    for (var i = 0, len = piles.length; i < len; i++) {\r\n      this._piles.push(new Pile(piles[i], this.direction.counterpart));\r\n    }\r\n  }\r\n\r\n  get isMain()    { return this.isType(Types.Main); }\r\n  get direction() { return this._direction; }\r\n  get type()      { return this._type; }\r\n  get size()      { return this._piles.length; }\r\n  get last()      { return this._piles[0]; }\r\n  get piles()     { return this._piles; }\r\n\r\n  pile(no)        { return this.piles[this.assertNo(no)]; }\r\n  isType(type)    { return this._type === type; }\r\n\r\n  assertNo(no) {\r\n    if (no<0 || no>=this.size) {\r\n      Assert.error('wrong pile no', no);\r\n    }\r\n    return no;\r\n  }\r\n\r\n  static assertType(type) {\r\n    if (Types[type] === undefined) {\r\n      Assert.error('wrong Row type',  type);\r\n    }\r\n    return type;\r\n  }\r\n}\r\n\r\nconst Types = Object.freeze({\r\n  Estate:     ['Reserve', 'Hand', 'Techs', 'Assets', 'Missions'],\r\n  Factory:    ['Scrap', 'Factory', 'Factory', 'Factory'],\r\n  Research:   ['Ideas', 'Research', 'Research', 'Research', 'Research'],\r\n})\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}