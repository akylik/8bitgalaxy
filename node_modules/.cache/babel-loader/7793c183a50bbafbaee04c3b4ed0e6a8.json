{"ast":null,"code":"import Assert from \"./Assert.js\";\nimport { makeAutoObservable } from \"mobx\";\n\nclass State {\n  constructor(name) {\n    this._name = name;\n    this._absent = false;\n    this._turned = false;\n    this._inserted = false;\n    this._alternative = false;\n    this.parseName(name);\n    makeAutoObservable(this);\n  }\n\n  parseName(name) {\n    name.split('-').forEach(part => this.applyName(part));\n  }\n\n  applyName(input) {\n    input = input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\n    name = Names[input];\n\n    if (input && !name) {\n      Assert.error('wrong state: ' + input);\n    }\n\n    if (name === Names.Absent) {\n      this._absent = true;\n    } else if (name === Names.Turned) {\n      this._turned = true;\n    } else if (name === Names.Inserted) {\n      this._inserted = true;\n    } else if (name === Names.Alternative) {\n      this._alternative = true;\n    }\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get isAbsent() {\n    return this._absent;\n  }\n\n  get isTurned() {\n    return this._turned;\n  }\n\n  get isInserted() {\n    return this._inserted;\n  }\n\n  get isAlternative() {\n    return this._alternative;\n  }\n\n  get isVisible() {\n    return !this._absent && !this._turned;\n  }\n\n  get visibility() {\n    if (this.isAbsent) {\n      return Names.Absent;\n    }\n\n    if (this.isTurned) {\n      return Names.Turned;\n    }\n\n    return Names.Visible;\n  }\n\n  turnOver() {\n    this._turned = !this._turned;\n  }\n\n  static assert(sample) {\n    if (sample instanceof State) {\n      return sample;\n    }\n\n    if (typeof sample === 'string') {\n      return new State(sample);\n    }\n\n    Assert.error('not a State', sample);\n  }\n\n  static isName(name) {\n    return State.normalizeName(name) !== null;\n  }\n\n  static assertName(name) {\n    let norm = State.normalizeName(name);\n\n    if (name === null) {\n      Assert.error('wrong State name', name);\n    }\n\n    return norm;\n  }\n\n  static normalizeName(name) {\n    if (name === '') {\n      return Names.Normal;\n    }\n\n    name = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n\n    if (Names[name] === undefined) {\n      return null;\n    }\n\n    return Names[name];\n  }\n\n}\n\nconst Names = Object.freeze({\n  Absent: 'Absent',\n  Turned: 'Turned',\n  Visible: 'Visible',\n  Ins: 'Inserted',\n  Inserted: 'Inserted',\n  Alt: 'Alternative',\n  Alternative: 'Alternative'\n});\nexport default State;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/State.js"],"names":["Assert","makeAutoObservable","State","constructor","name","_name","_absent","_turned","_inserted","_alternative","parseName","split","forEach","part","applyName","input","charAt","toUpperCase","slice","toLowerCase","Names","error","Absent","Turned","Inserted","Alternative","isAbsent","isTurned","isInserted","isAlternative","isVisible","visibility","Visible","turnOver","assert","sample","isName","normalizeName","assertName","norm","Normal","undefined","Object","freeze","Ins","Alt"],"mappings":"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","sourcesContent":["import Assert from \"./Assert.js\";\r\nimport {makeAutoObservable} from \"mobx\";\r\n\r\nclass State {\r\n  constructor(name) {\r\n    this._name        = name;\r\n    this._absent      = false;\r\n    this._turned      = false;\r\n    this._inserted    = false;\r\n    this._alternative = false;\r\n    this.parseName(name);\r\n     makeAutoObservable(this);\r\n     \r\n  }\r\n\r\n  parseName(name) {\r\n    name.split('-').forEach(part => this.applyName(part));\r\n  }\r\n\r\n  applyName(input) {\r\n    input = input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\r\n    name = Names[input];\r\n    if (input && !name) {\r\n      Assert.error('wrong state: ' + input);\r\n    }\r\n    if (name === Names.Absent) {\r\n      this._absent = true;\r\n    } else if (name === Names.Turned) {\r\n      this._turned = true;\r\n    } else if (name === Names.Inserted) {\r\n      this._inserted = true;\r\n    } else if (name === Names.Alternative) {\r\n      this._alternative = true;\r\n    }\r\n  }\r\n\r\n  get name()            { return this._name; }\r\n  get isAbsent()        { return this._absent; }\r\n  get isTurned()        { return this._turned; }\r\n  get isInserted()      { return this._inserted; }\r\n  get isAlternative()   { return this._alternative; }\r\n  get isVisible()       { return !this._absent && !this._turned; }\r\n\r\n  get visibility()      {\r\n    if (this.isAbsent) {\r\n      return Names.Absent;\r\n    }\r\n    if (this.isTurned) {\r\n      return Names.Turned;\r\n    }\r\n    return Names.Visible;\r\n  }\r\n\r\n  turnOver() {\r\n    this._turned = !this._turned;\r\n  }\r\n\r\n  static assert(sample) {\r\n    if (sample instanceof(State)) {\r\n      return sample;\r\n    }\r\n    if (typeof(sample) === 'string') {\r\n      return new State(sample);\r\n    }\r\n    Assert.error('not a State', sample);\r\n  }\r\n\r\n  static isName(name)     { return State.normalizeName(name) !== null; }\r\n\r\n  static assertName(name) {\r\n    let norm = State.normalizeName(name);\r\n    if (name === null) {\r\n      Assert.error('wrong State name', name);\r\n    }\r\n    return norm;\r\n  }\r\n\r\n  static normalizeName(name) {\r\n    if (name === '') {\r\n      return Names.Normal;\r\n    }\r\n    name = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\r\n    if (Names[name] === undefined) {\r\n      return null;\r\n    }\r\n    return Names[name];\r\n  }\r\n}\r\n\r\nconst Names = Object.freeze({\r\n  Absent:       'Absent',\r\n  Turned:       'Turned',\r\n  Visible:      'Visible',\r\n  Ins:          'Inserted',\r\n  Inserted:     'Inserted',\r\n  Alt:          'Alternative',\r\n  Alternative:  'Alternative',\r\n})\r\n\r\nexport default State;\r\n"]},"metadata":{},"sourceType":"module"}