{"ast":null,"code":"import Prop from \"./Prop.js\";\nimport aCard from \"./aCard.js\";\nimport State from \"./State.js\";\nimport Assert from \"./Assert.js\";\nimport { makeAutoObservable } from \"mobx\";\n\nclass Card {\n  constructor(state, acard) {\n    this._state = State.assert(state);\n    this._acard = aCard.assert(acard);\n    makeAutoObservable(this);\n  }\n\n  get State() {\n    return this._state;\n  }\n\n  get visibility() {\n    return this._state.visibility;\n  }\n\n  get isAbsent() {\n    return this._state.isAbsent;\n  }\n\n  get isTurned() {\n    return this._state.isTurned;\n  }\n\n  get isVisible() {\n    return this._state.isVisible;\n  }\n\n  get isAlternative() {\n    return this._state.isAlternative;\n  }\n\n  get aCard() {\n    return this._acard;\n  }\n\n  get Specs() {\n    return this._acard.Specs;\n  }\n\n  get Alternative() {\n    return this._acard.Alternative;\n  }\n\n  get Name() {\n    return this.aCard.Name;\n  }\n\n  get Type() {\n    return this.aCard.Type;\n  }\n\n  get Race() {\n    return this.aCard.Race;\n  }\n\n  get Level() {\n    return this.statedValue(Prop.Level);\n  }\n\n  get Klass() {\n    return this.statedValue(Prop.Klass);\n  }\n\n  get Defense() {\n    return this.statedValue(Prop.Defense);\n  }\n\n  get Attack() {\n    return this.statedValue(Prop.Attack);\n  }\n\n  get Colonization() {\n    return this.statedValue(Prop.Colonization);\n  }\n\n  get Science() {\n    return this.statedValue(Prop.Science);\n  }\n\n  get Production() {\n    return this.statedValue(Prop.Production);\n  }\n\n  get Requires() {\n    return this.statedValue(Prop.Requires);\n  }\n\n  get Cooperation() {\n    return this.statedValue(Prop.Cooperation);\n  }\n\n  get Utilization() {\n    return this.statedValue(Prop.Utilization);\n  }\n\n  get isHero() {\n    return this.aCard.isHero;\n  }\n\n  get isColony() {\n    return this.aCard.isColony;\n  }\n\n  get isShip() {\n    return this.aCard.isShip;\n  }\n\n  get isBase() {\n    return this.aCard.isBase;\n  } /////// \n\n\n  get Parent() {} ///////\n\n\n  statedValue(prop) {\n    if (this.isTurned) {\n      return null;\n    }\n\n    if (this.isAlternative) {\n      Assert.error('TODO implement!');\n    }\n\n    return this.aCard.getValue(prop);\n  }\n\n  turnOver() {\n    this.State.turnOver();\n  }\n\n  static assert(sample) {\n    if (sample instanceof Card) {\n      return sample;\n    }\n\n    if (typeof sample === 'string') {\n      Card.fromString(sample); //   set Parent()\n\n      return;\n    }\n\n    Assert.error('not a Card', sample);\n  }\n\n  static fromString(name) {\n    let [state, acard] = name.split(' ', 2);\n\n    if (!State.isName(state)) {\n      acard = state;\n      state = '';\n    }\n\n    return new Card(state, acard);\n  }\n\n}\n\nCard.AbsentBase = Card.assert('absent Base');\nCard.AbsentHero = Card.assert('absent Hero');\nCard.AbsentShip = Card.assert('absent Ship');\nCard.AbsentColony = Card.assert('absent Colony');\nexport default Card;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Card.js"],"names":["Prop","aCard","State","Assert","makeAutoObservable","Card","constructor","state","acard","_state","assert","_acard","visibility","isAbsent","isTurned","isVisible","isAlternative","Specs","Alternative","Name","Type","Race","Level","statedValue","Klass","Defense","Attack","Colonization","Science","Production","Requires","Cooperation","Utilization","isHero","isColony","isShip","isBase","Parent","prop","error","getValue","turnOver","sample","fromString","name","split","isName","AbsentBase","AbsentHero","AbsentShip","AbsentColony"],"mappings":"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","sourcesContent":["import Prop from \"./Prop.js\";\r\nimport aCard from \"./aCard.js\";\r\nimport State from \"./State.js\";\r\nimport Assert from \"./Assert.js\";\r\nimport {makeAutoObservable} from \"mobx\";\r\n\r\nclass Card {\r\n  constructor(state, acard) {\r\n    this._state = State.assert(state);\r\n    this._acard = aCard.assert(acard);\r\n     makeAutoObservable(this);\r\n  }\r\n\r\n  get State()             { return this._state; }\r\n  get visibility()        { return this._state.visibility; }\r\n  get isAbsent()          { return this._state.isAbsent; }\r\n  get isTurned()          { return this._state.isTurned; }\r\n  get isVisible()         { return this._state.isVisible; }\r\n  get isAlternative()     { return this._state.isAlternative; }\r\n\r\n  get aCard()             { return this._acard; }\r\n  get Specs()             { return this._acard.Specs; }\r\n  get Alternative()       { return this._acard.Alternative; }\r\n\r\n  get Name()              { return this.aCard.Name; }\r\n  get Type()              { return this.aCard.Type; }\r\n  get Race()              { return this.aCard.Race; }\r\n  get Level()             { return this.statedValue(Prop.Level); }\r\n  get Klass()             { return this.statedValue(Prop.Klass); }\r\n  get Defense()           { return this.statedValue(Prop.Defense); }\r\n  get Attack()            { return this.statedValue(Prop.Attack); }\r\n  get Colonization()      { return this.statedValue(Prop.Colonization); }\r\n  get Science()           { return this.statedValue(Prop.Science); }\r\n  get Production()        { return this.statedValue(Prop.Production); }\r\n  get Requires()          { return this.statedValue(Prop.Requires); }\r\n  get Cooperation()       { return this.statedValue(Prop.Cooperation); }\r\n  get Utilization()       { return this.statedValue(Prop.Utilization); }\r\n\r\n  get isHero()            { return this.aCard.isHero; }\r\n  get isColony()          { return this.aCard.isColony; }\r\n  get isShip()            { return this.aCard.isShip; }\r\n  get isBase() { return this.aCard.isBase; }\r\n  /////// \r\n  get Parent() {  }\r\n  ///////\r\n  static AbsentBase   = Card.assert('absent Base');\r\n  static AbsentHero   = Card.assert('absent Hero');\r\n  static AbsentShip   = Card.assert('absent Ship');\r\n  static AbsentColony = Card.assert('absent Colony');\r\n\r\n  statedValue(prop)       {\r\n    if (this.isTurned) {\r\n      return null;\r\n    }\r\n    if (this.isAlternative) {\r\n      Assert.error('TODO implement!')\r\n    }\r\n    return this.aCard.getValue(prop);\r\n  }\r\n\r\n  turnOver() {\r\n    this.State.turnOver();\r\n  }\r\n\r\n  static assert(sample) {\r\n    if (sample instanceof(Card)) {\r\n      return sample;\r\n    }\r\n     if (typeof (sample) === 'string') {\r\n        Card.fromString(sample);\r\n      //   set Parent()\r\n        \r\n      return ;\r\n    }\r\n    Assert.error('not a Card', sample);\r\n  }\r\n\r\n  static fromString(name) {\r\n    let [state, acard] = name.split(' ', 2);\r\n    if (! State.isName(state)) {\r\n      acard = state;\r\n      state = '';\r\n    }\r\n    return new Card(state, acard);\r\n  }\r\n}\r\n\r\nexport default Card;\r\n"]},"metadata":{},"sourceType":"module"}