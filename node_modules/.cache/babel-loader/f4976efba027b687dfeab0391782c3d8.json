{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a_kyl\\\\Documents\\\\GitHub\\\\8bitgalaxy\\\\src\\\\Model\\\\Pile.js\",\n    _s = $RefreshSig$();\n\nimport Card from \"./Card.js\";\nimport Direction from \"./Direction.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Pile {\n  constructor(type, direction) {\n    this._type = type;\n    this._direction = Direction.assert(direction);\n    this.absentCard = Card.assert('absent ' + type);\n    this._cards = [];\n  }\n\n  get cards() {\n    return this._cards[this.size - 1] ? this._cards : [this.absentCard];\n  }\n\n  get direction() {\n    return this._direction;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get size() {\n    return this._cards.length;\n  }\n\n  get top() {\n    var _this$_cards;\n\n    return (_this$_cards = this._cards[this.size - 1]) !== null && _this$_cards !== void 0 ? _this$_cards : this.absentCard;\n  }\n\n  get(i) {\n    var _this$_cards$i;\n\n    return (_this$_cards$i = this._cards[i]) !== null && _this$_cards$i !== void 0 ? _this$_cards$i : i === 0 ? this.top : null;\n  }\n\n  removeCard(card) {\n    return this._cards.reduce((acc, c, index) => {\n      if (card === c && acc.length > 1) {\n        acc.splice(-1, 1);\n      } else if (card === c && acc.length === 1) {\n        acc.splice(-1, 1, this.absentCard); //   console.log(this.top === this.absentCard)\n        //   acc[index]=this.absentCard\n      }\n\n      return acc;\n    }, this._cards);\n  }\n\n  putUnder(card) {\n    this._cards.unshift(Card.assert(card));\n  } //   put(card) { \n  //      if(this._cards.includes(this.absentCard)){\n  //       this._cards.splice(0,1)\n  //      } \n  //         this._cards.push(Card.assert(card, this))\n  //    }\n\n\n  put(card) {\n    this._cards.push(Card.assert(card, this));\n  }\n\n}\n\nconst SlotView = styled.div`\n  position: absolute;\n  border-width: 4px;\n  border-style: solid;\n//   border-color: ${({\n  isOver\n}) => isOver ? \"white\" : \"transparent\"};\n  top: ${({\n  y\n}) => y + \"px\"};\n  left: ${({\n  x\n}) => x + \"px\"};\n  z-index: 2;\n  border-radius: 20px;\n  width: 300px;\n  height: 200px;\n`;\n_c = SlotView;\nconst Slot = observer(_c2 = _s(({\n  name,\n  star,\n  y,\n  x,\n  card,\n  slot,\n  isActive\n}) => {\n  _s();\n\n  const [p] = usePosition(y, x); //   const [{isOver, canDrop}, dropRef] = useDrop(() => ({\n  //     accept: \"CARD\",\n  //     drop: (item, monitor) => {\n  //       let a = monitor.getItem();\n  //       if(item.card.Type === card.Name){\n  //         item.card.destination.removeCard(item.card);\n  //         star.put(item.card, slot);\n  //       }\n  //       return {\n  //          place: star,\n  //          name: name,\n  //       };\n  //    },\n  //     collect: monitor => ({\n  //       isOver: !!monitor.isOver(),\n  //     }),\n  //   }), [x, y]);\n\n  return /*#__PURE__*/_jsxDEV(SlotView, {\n    ref: dropRef // className={card.Name} \n    ,\n    y: p.y - 0,\n    x: 18 + p.x // isOver={isOver} \n    // style={{borderColor: borderColor}}\n    // isOver={isOver ? isOver: isActive} \n    // style={isOver && !isActive ?{borderColor: 'white'}:{borderColor: 'transparent'}}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this) //  <SlotView ref={dropRef} className={name} y={p.y - 94} x={18 + p.x} isOver={isOver} />\n  ;\n}, \"JqhsnV51FLbBMrYe3I3IaHXnvkY=\", true));\n_c3 = Slot;\nexport default Pile;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SlotView\");\n$RefreshReg$(_c2, \"Slot$observer\");\n$RefreshReg$(_c3, \"Slot\");","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Pile.js"],"names":["Card","Direction","Pile","constructor","type","direction","_type","_direction","assert","absentCard","_cards","cards","size","length","top","get","i","removeCard","card","reduce","acc","c","index","splice","putUnder","unshift","put","push","SlotView","styled","div","isOver","y","x","Slot","observer","name","star","slot","isActive","p","usePosition","dropRef"],"mappings":"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","sourcesContent":["import Card from \"./Card.js\";\r\nimport Direction from \"./Direction.js\";\r\n\r\n\r\nclass Pile {\r\n  constructor(type, direction) {\r\n    this._type = type;\r\n    this._direction = Direction.assert(direction);\r\n    this.absentCard = Card.assert('absent '+type);\r\n    this._cards = [];\r\n  }\r\n\r\n  get cards()     {\r\n    return this._cards[this.size - 1] ? this._cards : [this.absentCard];\r\n  }\r\n  get direction() { return this._direction; }\r\n  get type()      { return this._type; }\r\n  get size()      { return this._cards.length; }\r\n  get top()       { return this._cards[this.size-1] ?? this.absentCard; }\r\n\r\n  get(i)          { return this._cards[i] ?? (i===0 ? this.top : null); }\r\n\r\n  removeCard(card) {return this._cards.reduce((acc, c, index) => {\r\n     if(card===c && acc.length > 1){\r\n        acc.splice(-1,1)\r\n     } \r\n     else if(card===c && acc.length === 1 ) {\r\n        acc.splice(-1,1, this.absentCard)\r\n      //   console.log(this.top === this.absentCard)\r\n      //   acc[index]=this.absentCard\r\n     }\r\n      return acc;\r\n    }, this._cards);\r\n  }\r\n\r\n  putUnder(card)  { this._cards.unshift(Card.assert(card)); }\r\n//   put(card) { \r\n//      if(this._cards.includes(this.absentCard)){\r\n//       this._cards.splice(0,1)\r\n//      } \r\n//         this._cards.push(Card.assert(card, this))\r\n//    }\r\n  put(card) { this._cards.push(Card.assert(card, this)); }\r\n}\r\n\r\nconst SlotView = styled.div`\r\n  position: absolute;\r\n  border-width: 4px;\r\n  border-style: solid;\r\n//   border-color: ${({isOver}) => isOver ? \"white\" : \"transparent\"};\r\n  top: ${({y}) => y + \"px\"};\r\n  left: ${({x}) => x + \"px\"};\r\n  z-index: 2;\r\n  border-radius: 20px;\r\n  width: 300px;\r\n  height: 200px;\r\n`;\r\n\r\nconst Slot = observer(({name, star, y, x, card, slot, isActive }) => {\r\n  const [p] = usePosition(y, x);\r\n//   const [{isOver, canDrop}, dropRef] = useDrop(() => ({\r\n//     accept: \"CARD\",\r\n//     drop: (item, monitor) => {\r\n//       let a = monitor.getItem();\r\n//       if(item.card.Type === card.Name){\r\n//         item.card.destination.removeCard(item.card);\r\n//         star.put(item.card, slot);\r\n//       }\r\n//       return {\r\n//          place: star,\r\n//          name: name,\r\n//       };\r\n//    },\r\n//     collect: monitor => ({\r\n//       isOver: !!monitor.isOver(),\r\n//     }),\r\n//   }), [x, y]);\r\n\r\n  return (\r\n    <SlotView \r\n      ref={dropRef} \r\n      // className={card.Name} \r\n      y={p.y - 0} \r\n      x={18 + p.x} \r\n      // isOver={isOver} \r\n      // style={{borderColor: borderColor}}\r\n      // isOver={isOver ? isOver: isActive} \r\n      // style={isOver && !isActive ?{borderColor: 'white'}:{borderColor: 'transparent'}}\r\n    />\r\n   //  <SlotView ref={dropRef} className={name} y={p.y - 94} x={18 + p.x} isOver={isOver} />\r\n  );\r\n});\r\n\r\n\r\nexport default Pile;\r\n"]},"metadata":{},"sourceType":"module"}