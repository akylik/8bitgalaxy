{"ast":null,"code":"import Specs from \"./Specs.js\";\nimport Klass from \"./Klass.js\";\nimport Assert from \"./Assert.js\";\n\nclass Action {\n  constructor(klass, value) {\n    this._klass = Klass.assert(klass);\n    this._value = Action.assertValue(value);\n  }\n\n  get Klass() {\n    return this._klass;\n  }\n\n  get Value() {\n    return this._value;\n  }\n\n  get short() {\n    return String(this.Value) + this.Klass.short;\n  }\n\n  dec(num = 1) {\n    return new Action(this.Klass, this.Value > 1 ? this.Value - num : 1);\n  }\n\n  static text(text) {\n    return new Action(Klass.Attack, text);\n  }\n\n  static assertValue(value) {\n    /// TODO validation ??\n    return value;\n  }\n\n  static assert(sample) {\n    if (sample instanceof Action) {\n      return sample;\n    }\n\n    if (typeof sample === 'string') {\n      return Action.fromString(sample);\n    }\n\n    Assert.error('not an Action', sample);\n  }\n\n  static fromString(name) {\n    Assert.string(name);\n\n    if (name.length !== 2) {\n      return Action.text(name);\n    }\n\n    let value = name.charAt(0).toLowerCase();\n    let klass = name.charAt(1).toLowerCase();\n\n    if (isNaN(value)) {\n      [klass, value] = [value, klass];\n    }\n\n    return new Action(klass, value);\n  }\n\n}\n\nexport default Action;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Action.js"],"names":["Specs","Klass","Assert","Action","constructor","klass","value","_klass","assert","_value","assertValue","Value","short","String","dec","num","text","Attack","sample","fromString","error","name","string","length","charAt","toLowerCase","isNaN"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,MAAN,CAAa;AACXC,EAAAA,WAAW,CAACC,KAAD,EAAQC,KAAR,EAAe;AACxB,SAAKC,MAAL,GAAcN,KAAK,CAACO,MAAN,CAAaH,KAAb,CAAd;AACA,SAAKI,MAAL,GAAcN,MAAM,CAACO,WAAP,CAAmBJ,KAAnB,CAAd;AACD;;AAEQ,MAALL,KAAK,GAAG;AAAE,WAAO,KAAKM,MAAZ;AAAqB;;AAC1B,MAALI,KAAK,GAAG;AAAE,WAAO,KAAKF,MAAZ;AAAqB;;AAC1B,MAALG,KAAK,GAAG;AAAE,WAAOC,MAAM,CAAC,KAAKF,KAAN,CAAN,GAAqB,KAAKV,KAAL,CAAWW,KAAvC;AAA+C;;AAE7DE,EAAAA,GAAG,CAACC,GAAG,GAAG,CAAP,EAAU;AACX,WAAO,IAAIZ,MAAJ,CAAW,KAAKF,KAAhB,EAAuB,KAAKU,KAAL,GAAW,CAAX,GAAgB,KAAKA,KAAL,GAAaI,GAA7B,GAAoC,CAA3D,CAAP;AACD;;AAEU,SAAJC,IAAI,CAACA,IAAD,EAAO;AAChB,WAAO,IAAIb,MAAJ,CAAWF,KAAK,CAACgB,MAAjB,EAAyBD,IAAzB,CAAP;AACD;;AAEiB,SAAXN,WAAW,CAACJ,KAAD,EAAQ;AACxB;AACA,WAAOA,KAAP;AACD;;AAEY,SAANE,MAAM,CAACU,MAAD,EAAS;AACpB,QAAIA,MAAM,YAAYf,MAAtB,EAA+B;AAC7B,aAAOe,MAAP;AACD;;AACD,QAAI,OAAOA,MAAP,KAAmB,QAAvB,EAAiC;AAC/B,aAAOf,MAAM,CAACgB,UAAP,CAAkBD,MAAlB,CAAP;AACD;;AACDhB,IAAAA,MAAM,CAACkB,KAAP,CAAa,eAAb,EAA8BF,MAA9B;AACD;;AAEgB,SAAVC,UAAU,CAACE,IAAD,EAAO;AACtBnB,IAAAA,MAAM,CAACoB,MAAP,CAAcD,IAAd;;AACA,QAAIA,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACrB,aAAOpB,MAAM,CAACa,IAAP,CAAYK,IAAZ,CAAP;AACD;;AACD,QAAIf,KAAK,GAAGe,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeC,WAAf,EAAZ;AACA,QAAIpB,KAAK,GAAGgB,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeC,WAAf,EAAZ;;AACA,QAAIC,KAAK,CAACpB,KAAD,CAAT,EAAkB;AAChB,OAACD,KAAD,EAAQC,KAAR,IAAiB,CAACA,KAAD,EAAQD,KAAR,CAAjB;AACD;;AACD,WAAO,IAAIF,MAAJ,CAAWE,KAAX,EAAkBC,KAAlB,CAAP;AACD;;AA5CU;;AA+Cb,eAAeH,MAAf","sourcesContent":["import Specs from \"./Specs.js\";\r\nimport Klass from \"./Klass.js\";\r\nimport Assert from \"./Assert.js\";\r\n\r\nclass Action {\r\n  constructor(klass, value) {\r\n    this._klass = Klass.assert(klass);\r\n    this._value = Action.assertValue(value);\r\n  }\r\n\r\n  get Klass() { return this._klass; }\r\n  get Value() { return this._value; }\r\n  get short() { return String(this.Value) + this.Klass.short; }\r\n\r\n  dec(num = 1) {\r\n    return new Action(this.Klass, this.Value>1 ? (this.Value - num) : 1);\r\n  }\r\n\r\n  static text(text) {\r\n    return new Action(Klass.Attack, text);\r\n  }\r\n\r\n  static assertValue(value) {\r\n    /// TODO validation ??\r\n    return value;\r\n  }\r\n\r\n  static assert(sample) {\r\n    if (sample instanceof(Action)) {\r\n      return sample;\r\n    }\r\n    if (typeof(sample) === 'string') {\r\n      return Action.fromString(sample);\r\n    }\r\n    Assert.error('not an Action', sample);\r\n  }\r\n\r\n  static fromString(name) {\r\n    Assert.string(name);\r\n    if (name.length !== 2) {\r\n      return Action.text(name);\r\n    }\r\n    let value = name.charAt(0).toLowerCase();\r\n    let klass = name.charAt(1).toLowerCase();\r\n    if (isNaN(value)) {\r\n      [klass, value] = [value, klass];\r\n    }\r\n    return new Action(klass, value)\r\n  }\r\n}\r\n\r\nexport default Action;\r\n"]},"metadata":{},"sourceType":"module"}