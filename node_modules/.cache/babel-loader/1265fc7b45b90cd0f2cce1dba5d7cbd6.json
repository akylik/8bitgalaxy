{"ast":null,"code":"import Assert from \"./Assert.js\";\nimport { makeAutoObservable } from \"mobx\";\n\nclass State {\n  constructor(name) {\n    this._name = name;\n    this._absent = false;\n    this._turned = false;\n    this._inserted = false;\n    this._alternative = false;\n    this.parseName(name);\n    makeAutoObservable(this); //////\n\n    this._parent = null;\n  }\n\n  parseName(name) {\n    name.split(\"-\").forEach(part => this.applyName(part));\n  }\n\n  applyName(input) {\n    input = input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\n    name = Names[input];\n\n    if (input && !name) {\n      Assert.error(\"wrong state: \" + input);\n    }\n\n    if (name === Names.Absent) {\n      this._absent = true;\n    } else if (name === Names.Turned) {\n      this._turned = true;\n    } else if (name === Names.Inserted) {\n      this._inserted = true;\n    } else if (name === Names.Alternative) {\n      this._alternative = true;\n    }\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get isAbsent() {\n    return this._absent;\n  }\n\n  get isTurned() {\n    return this._turned;\n  }\n\n  get isInserted() {\n    return this._inserted;\n  }\n\n  get isAlternative() {\n    return this._alternative;\n  }\n\n  get isVisible() {\n    return !this._absent && !this._turned;\n  }\n\n  get visibility() {\n    if (this.isAbsent) {\n      return Names.Absent;\n    }\n\n    if (this.isTurned) {\n      return Names.Turned;\n    }\n\n    return Names.Visible;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  turnOver() {\n    this._turned = !this._turned;\n  }\n\n  static assert(sample) {\n    if (sample instanceof State) {\n      return sample;\n    }\n\n    if (typeof sample === \"string\") {\n      return new State(sample);\n    }\n\n    Assert.error(\"not a State\", sample);\n  }\n\n  static isName(name) {\n    return State.normalizeName(name) !== null;\n  }\n\n  static assertName(name) {\n    let norm = State.normalizeName(name);\n\n    if (name === null) {\n      Assert.error(\"wrong State name\", name);\n    }\n\n    return norm;\n  }\n\n  static normalizeName(name) {\n    if (name === \"\") {\n      return Names.Normal;\n    }\n\n    name = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n\n    if (Names[name] === undefined) {\n      return null;\n    }\n\n    return Names[name];\n  }\n\n}\n\nconst Names = Object.freeze({\n  Absent: 'Absent',\n  Turned: 'Turned',\n  Visible: 'Visible',\n  Ins: 'Inserted',\n  Inserted: 'Inserted',\n  Alt: 'Alternative',\n  Alternative: 'Alternative'\n});\nexport default State;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/State.js"],"names":["Assert","makeAutoObservable","State","constructor","name","_name","_absent","_turned","_inserted","_alternative","parseName","_parent","split","forEach","part","applyName","input","charAt","toUpperCase","slice","toLowerCase","Names","error","Absent","Turned","Inserted","Alternative","isAbsent","isTurned","isInserted","isAlternative","isVisible","visibility","Visible","parent","turnOver","assert","sample","isName","normalizeName","assertName","norm","Normal","undefined","Object","freeze","Ins","Alt"],"mappings":"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","sourcesContent":["import Assert from \"./Assert.js\";\r\nimport {makeAutoObservable} from \"mobx\";\r\n\r\nclass State {\r\n  constructor(name) {\r\n    this._name = name;\r\n    this._absent = false;\r\n    this._turned = false;\r\n    this._inserted = false;\r\n    this._alternative = false;\r\n    this.parseName(name);\r\n    makeAutoObservable(this);\r\n    //////\r\n    this._parent = null;\r\n  }\r\n\r\n  parseName(name) {\r\n    name.split(\"-\").forEach((part) => this.applyName(part));\r\n  }\r\n\r\n  applyName(input) {\r\n    input = input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\r\n    name = Names[input];\r\n    if (input && !name) {\r\n      Assert.error(\"wrong state: \" + input);\r\n    }\r\n    if (name === Names.Absent) {\r\n      this._absent = true;\r\n    } else if (name === Names.Turned) {\r\n      this._turned = true;\r\n    } else if (name === Names.Inserted) {\r\n      this._inserted = true;\r\n    } else if (name === Names.Alternative) {\r\n      this._alternative = true;\r\n    }\r\n  }\r\n\r\n  get name() {\r\n    return this._name;\r\n  }\r\n  get isAbsent() {\r\n    return this._absent;\r\n  }\r\n  get isTurned() {\r\n    return this._turned;\r\n  }\r\n  get isInserted() {\r\n    return this._inserted;\r\n  }\r\n  get isAlternative() {\r\n    return this._alternative;\r\n  }\r\n  get isVisible() {\r\n    return !this._absent && !this._turned;\r\n  }\r\n\r\n  get visibility() {\r\n    if (this.isAbsent) {\r\n      return Names.Absent;\r\n    }\r\n    if (this.isTurned) {\r\n      return Names.Turned;\r\n    }\r\n    return Names.Visible;\r\n  }\r\n\r\n  get parent() {\r\n    return this._parent;\r\n  }\r\n\r\n  turnOver() {\r\n    this._turned = !this._turned;\r\n  }\r\n\r\n  static assert(sample) {\r\n    if (sample instanceof State) {\r\n      return sample;\r\n    }\r\n    if (typeof sample === \"string\") {\r\n      return new State(sample);\r\n    }\r\n    Assert.error(\"not a State\", sample);\r\n  }\r\n\r\n  static isName(name) {\r\n    return State.normalizeName(name) !== null;\r\n  }\r\n\r\n  static assertName(name) {\r\n    let norm = State.normalizeName(name);\r\n    if (name === null) {\r\n      Assert.error(\"wrong State name\", name);\r\n    }\r\n    return norm;\r\n  }\r\n\r\n  static normalizeName(name) {\r\n    if (name === \"\") {\r\n      return Names.Normal;\r\n    }\r\n    name = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\r\n    if (Names[name] === undefined) {\r\n      return null;\r\n    }\r\n    return Names[name];\r\n  }\r\n}\r\n\r\nconst Names = Object.freeze({\r\n  Absent:       'Absent',\r\n  Turned:       'Turned',\r\n  Visible:      'Visible',\r\n  Ins:          'Inserted',\r\n  Inserted:     'Inserted',\r\n  Alt:          'Alternative',\r\n  Alternative:  'Alternative',\r\n})\r\n\r\nexport default State;\r\n"]},"metadata":{},"sourceType":"module"}