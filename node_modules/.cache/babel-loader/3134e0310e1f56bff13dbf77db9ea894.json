{"ast":null,"code":"import Card from \"./Model/Card.js\";\nimport Board from \"./Model/Board.js\";\nimport Player from \"./Model/Player.js\";\nimport Direction from \"./Model/Direction.js\";\nimport Assert from \"./Model/Assert.js\"; // import Drawer from \"./DivDrawer/Drawer.js\";\n\nimport Options from \"./Model/Options.js\";\n\nclass Game {\n  constructor(options = {}) {\n    var _options$board;\n\n    this._options = Options.assert(options); // this._drawer = options.drawer ?? new Drawer();\n\n    this._board = (_options$board = options.board) !== null && _options$board !== void 0 ? _options$board : new Board();\n    this.init();\n  }\n\n  card(name) {\n    return Card.assert(name);\n  }\n\n  get name() {\n    return this._options.name;\n  }\n\n  get board() {\n    return this._board;\n  } // get drawer() { return this._drawer; }\n\n\n  get options() {\n    return this._options;\n  }\n\n  static create(options = {}) {\n    return new Game(options);\n  }\n\n  init() {\n    let direction = Direction.TopToBottom;\n\n    for (const [name, race] of Object.entries(this.options.players)) {\n      this.board.addPlayer(new Player(name, race, direction));\n      direction = direction.reversed;\n    }\n\n    return this;\n  }\n\n  start(options = null, parent = null) {\n    this.draw(parent, this);\n  }\n\n  draw(parent = null, obj = null, y, x) {\n    return this.drawer.draw(parent, obj !== null && obj !== void 0 ? obj : this, y, x);\n  }\n\n  static assert(sample) {\n    if (sample instanceof Game) {\n      return sample;\n    }\n\n    Assert.error('not a Game', sample);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Game.js"],"names":["Card","Board","Player","Direction","Assert","Options","Game","constructor","options","_options","assert","_board","board","init","card","name","create","direction","TopToBottom","race","Object","entries","players","addPlayer","reversed","start","parent","draw","obj","y","x","drawer","sample","error"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,iBAAjB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,oBAApB;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AAAA;;AACxB,SAAKC,QAAL,GAAgBJ,OAAO,CAACK,MAAR,CAAeF,OAAf,CAAhB,CADwB,CAExB;;AACA,SAAKG,MAAL,qBAAcH,OAAO,CAACI,KAAtB,2DAA+B,IAAIX,KAAJ,EAA/B;AACA,SAAKY,IAAL;AACD;;AAEDC,EAAAA,IAAI,CAACC,IAAD,EAAO;AAAE,WAAOf,IAAI,CAACU,MAAL,CAAYK,IAAZ,CAAP;AAA2B;;AAChC,MAAJA,IAAI,GAAG;AAAE,WAAO,KAAKN,QAAL,CAAcM,IAArB;AAA4B;;AAChC,MAALH,KAAK,GAAG;AAAE,WAAO,KAAKD,MAAZ;AAAqB,GAV1B,CAWT;;;AACW,MAAPH,OAAO,GAAG;AAAE,WAAO,KAAKC,QAAZ;AAAuB;;AAE1B,SAANO,MAAM,CAACR,OAAO,GAAG,EAAX,EAAe;AAAE,WAAO,IAAIF,IAAJ,CAASE,OAAT,CAAP;AAA2B;;AAEzDK,EAAAA,IAAI,GAAG;AACL,QAAII,SAAS,GAAGd,SAAS,CAACe,WAA1B;;AACA,SAAK,MAAM,CAACH,IAAD,EAAOI,IAAP,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAe,KAAKb,OAAL,CAAac,OAA5B,CAA3B,EAAiE;AAC/D,WAAKV,KAAL,CAAWW,SAAX,CAAqB,IAAIrB,MAAJ,CAAWa,IAAX,EAAiBI,IAAjB,EAAuBF,SAAvB,CAArB;AACAA,MAAAA,SAAS,GAAGA,SAAS,CAACO,QAAtB;AACD;;AACD,WAAO,IAAP;AACD;;AAEDC,EAAAA,KAAK,CAACjB,OAAO,GAAG,IAAX,EAAiBkB,MAAM,GAAG,IAA1B,EAAgC;AACnC,SAAKC,IAAL,CAAUD,MAAV,EAAkB,IAAlB;AACD;;AAEDC,EAAAA,IAAI,CAACD,MAAM,GAAG,IAAV,EAAgBE,GAAG,GAAG,IAAtB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkC;AACpC,WAAO,KAAKC,MAAL,CAAYJ,IAAZ,CAAiBD,MAAjB,EAAyBE,GAAzB,aAAyBA,GAAzB,cAAyBA,GAAzB,GAAgC,IAAhC,EAAsCC,CAAtC,EAAyCC,CAAzC,CAAP;AACD;;AAEY,SAANpB,MAAM,CAACsB,MAAD,EAAS;AACpB,QAAIA,MAAM,YAAY1B,IAAtB,EAA6B;AAC3B,aAAO0B,MAAP;AACD;;AACD5B,IAAAA,MAAM,CAAC6B,KAAP,CAAa,YAAb,EAA2BD,MAA3B;AACD;;AAtCQ;;AAyCX,eAAe1B,IAAf","sourcesContent":["import Card from \"./Model/Card.js\";\r\nimport Board from \"./Model/Board.js\";\r\nimport Player from \"./Model/Player.js\";\r\nimport Direction from \"./Model/Direction.js\";\r\nimport Assert from \"./Model/Assert.js\";\r\n// import Drawer from \"./DivDrawer/Drawer.js\";\r\nimport Options from \"./Model/Options.js\";\r\n\r\nclass Game {\r\n  constructor(options = {}) {\r\n    this._options = Options.assert(options);\r\n    // this._drawer = options.drawer ?? new Drawer();\r\n    this._board = options.board ?? new Board();\r\n    this.init();\r\n  }\r\n\r\n  card(name) { return Card.assert(name); }\r\n  get name() { return this._options.name; }\r\n  get board() { return this._board; }\r\n  // get drawer() { return this._drawer; }\r\n  get options() { return this._options; }\r\n\r\n  static create(options = {}) { return new Game(options); }\r\n\r\n  init() {\r\n    let direction = Direction.TopToBottom;\r\n    for (const [name, race] of Object.entries(this.options.players)) {\r\n      this.board.addPlayer(new Player(name, race, direction));\r\n      direction = direction.reversed;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  start(options = null, parent = null) {\r\n    this.draw(parent, this);\r\n  }\r\n\r\n  draw(parent = null, obj = null, y, x) {\r\n    return this.drawer.draw(parent, obj ?? this, y, x);\r\n  }\r\n\r\n  static assert(sample) {\r\n    if (sample instanceof(Game)) {\r\n      return sample;\r\n    }\r\n    Assert.error('not a Game', sample);\r\n  }\r\n}\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}