{"ast":null,"code":"import Assert from \"./Assert.js\";\n\nclass Direction {\n  constructor(name) {\n    this._name = Direction.assertName(name);\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get xStep() {\n    return xSteps[this.name];\n  }\n\n  get yStep() {\n    return ySteps[this.name];\n  }\n\n  get reversed() {\n    return Direction.getOne(Reverseds[this.name]);\n  }\n\n  get counterpart() {\n    return Direction.getOne(Counterparts[this.name]);\n  }\n\n  static get TopToBottom() {\n    return Direction.getOne(Names.TopToBottom);\n  }\n\n  static get BottomToTop() {\n    return Direction.getOne(Names.BottomToTop);\n  }\n\n  static get LeftToRight() {\n    return Direction.getOne(Names.LeftToRight);\n  }\n\n  static get RightToLeft() {\n    return Direction.getOne(Names.RightToLeft);\n  }\n\n  static getOne(name) {\n    name = Direction.assertName(name);\n\n    if (Direction._values[name] === undefined) {\n      Direction._values[name] = new Direction(name);\n    }\n\n    return Direction._values[name];\n  }\n\n  static fromString(name) {\n    return new Direction(name);\n  }\n\n  static isName(name) {\n    return Direction.normalizeName(name) !== null;\n  }\n\n  static assert(sample) {\n    if (!sample) {\n      return Direction.TopToBottom;\n    }\n\n    if (sample instanceof Direction) {\n      return sample;\n    }\n\n    if (typeof sample === 'string') {\n      return Direction.fromString(sample);\n    }\n\n    Assert.error('not a Direction', sample);\n  }\n\n  static assertName(name) {\n    let norm = Direction.normalizeName(name);\n\n    if (name === null) {\n      Assert.error('wrong Direction name', name);\n    }\n\n    return norm;\n  }\n\n  static normalizeName(name) {\n    var _ref, _Names$name;\n\n    if (!name) {\n      return Names.TopToBottom;\n    }\n\n    let lc = name.toLowerCase();\n    return (_ref = (_Names$name = Names[name]) !== null && _Names$name !== void 0 ? _Names$name : Names[lc]) !== null && _ref !== void 0 ? _ref : null;\n  }\n\n}\n\nDirection._values = {};\nconst Names = Object.freeze({\n  TopToBottom: 'TopToBottom',\n  BottomToTop: 'BottomToTop',\n  LeftToRight: 'LeftToRight',\n  RightToLeft: 'RightToLeft'\n});\nconst xSteps = Object.freeze({\n  TopToBottom: 0,\n  BottomToTop: 0,\n  LeftToRight: 1,\n  RightToLeft: -1\n});\nconst ySteps = Object.freeze({\n  TopToBottom: 1,\n  BottomToTop: -1,\n  LeftToRight: 0,\n  RightToLeft: 0\n});\nconst Reverseds = Object.freeze({\n  TopToBottom: 'BottomToTop',\n  BottomToTop: 'TopToBottom',\n  LeftToRight: 'RightToLeft',\n  RightToLeft: 'LeftToRight'\n});\nconst Counterparts = Object.freeze({\n  TopToBottom: 'LeftToRight',\n  BottomToTop: 'RightToLeft',\n  LeftToRight: 'TopToBottom',\n  RightToLeft: 'BottomToTop'\n});\nexport default Direction;","map":{"version":3,"sources":["C:/Users/a_kyl/Documents/GitHub/8bitgalaxy/src/Model/Direction.js"],"names":["Assert","Direction","constructor","name","_name","assertName","xStep","xSteps","yStep","ySteps","reversed","getOne","Reverseds","counterpart","Counterparts","TopToBottom","Names","BottomToTop","LeftToRight","RightToLeft","_values","undefined","fromString","isName","normalizeName","assert","sample","error","norm","lc","toLowerCase","Object","freeze"],"mappings":"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","sourcesContent":["import Assert from \"./Assert.js\";\r\n\r\nclass Direction {\r\n  constructor(name) {\r\n    this._name = Direction.assertName(name);\r\n  }\r\n\r\n  get name()        { return this._name; }\r\n  get xStep()       { return xSteps[this.name]; }\r\n  get yStep()       { return ySteps[this.name]; }\r\n  get reversed()    { return Direction.getOne(Reverseds[this.name]); }\r\n  get counterpart() { return Direction.getOne(Counterparts[this.name]); }\r\n\r\n  static _values = {};\r\n\r\n  static get TopToBottom() { return Direction.getOne(Names.TopToBottom); }\r\n  static get BottomToTop() { return Direction.getOne(Names.BottomToTop); }\r\n  static get LeftToRight() { return Direction.getOne(Names.LeftToRight); }\r\n  static get RightToLeft() { return Direction.getOne(Names.RightToLeft); }\r\n\r\n  static getOne(name) {\r\n    name = Direction.assertName(name);\r\n    if (Direction._values[name] === undefined) {\r\n      Direction._values[name] = new Direction(name);\r\n    }\r\n    return Direction._values[name];\r\n  }\r\n\r\n  static fromString(name) { return new Direction(name); }\r\n  static isName(name)     { return Direction.normalizeName(name) !== null; }\r\n\r\n  static assert(sample) {\r\n    if (! sample) {\r\n      return Direction.TopToBottom;\r\n    }\r\n    if (sample instanceof(Direction)) {\r\n      return sample;\r\n    }\r\n    if (typeof(sample) === 'string') {\r\n      return Direction.fromString(sample);\r\n    }\r\n    Assert.error('not a Direction', sample);\r\n  }\r\n\r\n  static assertName(name) {\r\n    let norm = Direction.normalizeName(name);\r\n    if (name === null) {\r\n      Assert.error('wrong Direction name', name);\r\n    }\r\n    return norm;\r\n  }\r\n\r\n  static normalizeName(name) {\r\n    if (! name) {\r\n      return Names.TopToBottom;\r\n    }\r\n    let lc = name.toLowerCase();\r\n    return Names[name] ?? Names[lc] ?? null;\r\n  }\r\n}\r\n\r\nconst Names = Object.freeze({\r\n  TopToBottom:      'TopToBottom',\r\n  BottomToTop:      'BottomToTop',\r\n  LeftToRight:      'LeftToRight',\r\n  RightToLeft:      'RightToLeft',\r\n})\r\n\r\nconst xSteps = Object.freeze({\r\n  TopToBottom:      0,\r\n  BottomToTop:      0,\r\n  LeftToRight:      1,\r\n  RightToLeft:      -1\r\n})\r\n\r\nconst ySteps = Object.freeze({\r\n  TopToBottom:      1,\r\n  BottomToTop:      -1,\r\n  LeftToRight:      0,\r\n  RightToLeft:      0\r\n})\r\n\r\nconst Reverseds = Object.freeze({\r\n  TopToBottom:      'BottomToTop',\r\n  BottomToTop:      'TopToBottom',\r\n  LeftToRight:      'RightToLeft',\r\n  RightToLeft:      'LeftToRight',\r\n})\r\n\r\nconst Counterparts = Object.freeze({\r\n  TopToBottom:      'LeftToRight',\r\n  BottomToTop:      'RightToLeft',\r\n  LeftToRight:      'TopToBottom',\r\n  RightToLeft:      'BottomToTop'\r\n})\r\n\r\nexport default Direction;\r\n"]},"metadata":{},"sourceType":"module"}